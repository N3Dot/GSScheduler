import uuid
from datetime import datetime, timedelta, date
from typing import List, Dict, Any, Optional, Tuple, Callable
from enum import Enum
import random
import time

class Rarity(Enum):
    """ƒê·ªãnh nghƒ©a c√°c c·∫•p ƒë·ªô hi·∫øm c·ªßa v·∫≠t ph·∫©m."""
    COMMON = 1
    UNCOMMON = 2
    RARE = 3
    EPIC = 4
    LEGENDARY = 5

class Item:
    """
    ƒê·∫°i di·ªán cho m·ªôt v·∫≠t ph·∫©m trong tr√≤ ch∆°i.
    L·ªõp n√†y ch·ª©a t·∫•t c·∫£ th√¥ng tin chi ti·∫øt v·ªÅ m·ªôt v·∫≠t ph·∫©m, t·ª´ t√™n, m√¥ t·∫£,
    ƒë·∫øn c√°c hi·ªáu ·ª©ng khi s·ª≠ d·ª•ng.
    """
    def __init__(self,
                 name: str,
                 description: str,
                 category: str,
                 rarity: Rarity,
                 price: int,
                 icon_path: str,
                 consumable: bool = False,
                 passive: bool = False,
                 on_use_effect: Optional[Callable[['Character', 'RewardSystem'], None]] = None):
        """
        Kh·ªüi t·∫°o m·ªôt ƒë·ªëi t∆∞·ª£ng Item m·ªõi.

        Args:
            name (str): T√™n c·ªßa v·∫≠t ph·∫©m (duy nh·∫•t).
            description (str): M√¥ t·∫£ chi ti·∫øt v·ªÅ v·∫≠t ph·∫©m.
            category (str): Lo·∫°i v·∫≠t ph·∫©m (v√≠ d·ª•: 'Trang b·ªã', 'Ti√™u hao').
            rarity (Rarity): ƒê·ªô hi·∫øm c·ªßa v·∫≠t ph·∫©m.
            price (int): Gi√° tr·ªã c·ªßa v·∫≠t ph·∫©m b·∫±ng v√†ng.
            icon_path (str): ƒê∆∞·ªùng d·∫´n ƒë·∫øn file icon c·ªßa v·∫≠t ph·∫©m.
            consumable (bool): True n·∫øu v·∫≠t ph·∫©m s·∫Ω bi·∫øn m·∫•t sau khi s·ª≠ d·ª•ng.
            passive (bool): True n·∫øu v·∫≠t ph·∫©m c√≥ hi·ªáu ·ª©ng b·ªã ƒë·ªông khi trang b·ªã.
            on_use_effect (Callable): M·ªôt h√†m s·∫Ω ƒë∆∞·ª£c g·ªçi khi v·∫≠t ph·∫©m ƒë∆∞·ª£c s·ª≠ d·ª•ng.
        """
        self.name: str = name
        self.description: str = description
        self.category: str = category
        self.rarity: Rarity = rarity
        self.price: int = price
        self.icon: str = icon_path
        self.consumable: bool = consumable
        self.passive: bool = passive
        self.on_use_effect = on_use_effect

    def get_details(self) -> Dict[str, Any]:
        """Tr·∫£ v·ªÅ m·ªôt t·ª´ ƒëi·ªÉn ch·ª©a th√¥ng tin chi ti·∫øt c·ªßa v·∫≠t ph·∫©m."""
        return {
            "name": self.name,
            "description": self.description,
            "category": self.category,
            "rarity": self.rarity.name,
            "price": self.price,
            "icon": self.icon,
            "consumable": self.consumable,
            "passive": self.passive
        }

    def use_item(self, character: 'Character', reward_system: 'RewardSystem'):
        """
        X·ª≠ l√Ω logic khi nh√¢n v·∫≠t s·ª≠ d·ª•ng v·∫≠t ph·∫©m n√†y.
        Ch·ªâ c√≥ t√°c d·ª•ng v·ªõi c√°c v·∫≠t ph·∫©m 'consumable'.
        """
        if not self.consumable:
            print(f"V·∫≠t ph·∫©m '{self.name}' kh√¥ng th·ªÉ s·ª≠ d·ª•ng theo c√°ch n√†y.")
            return

        print(f"{character.name} ƒë√£ s·ª≠ d·ª•ng {self.name}.")
        # G·ªçi hi·ªáu ·ª©ng ƒë·∫∑c bi·ªát c·ªßa v·∫≠t ph·∫©m n·∫øu c√≥
        if self.on_use_effect:
            self.on_use_effect(character, reward_system)

        # X√≥a v·∫≠t ph·∫©m kh·ªèi kho ƒë·ªì c·ªßa nh√¢n v·∫≠t n·∫øu n√≥ l√† lo·∫°i ti√™u hao
        if self in character.inventory:
            character.inventory.remove(self)
            print(f"'{self.name}' ƒë√£ bi·∫øn m·∫•t kh·ªèi kho ƒë·ªì.")

    def __repr__(self) -> str:
        """Bi·ªÉu di·ªÖn ƒë·ªëi t∆∞·ª£ng Item d∆∞·ªõi d·∫°ng chu·ªói ƒë·ªÉ d·ªÖ g·ª° l·ªói."""
        return f"Item(name='{self.name}', rarity='{self.rarity.name}')"

class Character:
    """
    ƒê·∫°i di·ªán cho ng∆∞·ªùi d√πng trong ·ª©ng d·ª•ng.
    L·ªõp n√†y qu·∫£n l√Ω t·∫•t c·∫£ c√°c ch·ªâ s·ªë, t√†i s·∫£n, trang b·ªã, v√† ti·∫øn tr√¨nh c·ªßa nh√¢n v·∫≠t.
    """
    def __init__(self, name: str):
        self.name: str = name
        self.skin_visuals: str = "default_skin.png"  # Ngo·∫°i h√¨nh c∆° b·∫£n
        self.equipment_visuals: List[Tuple[str, Tuple[int, int]]] = []  # C√°c l·ªõp h√¨nh ·∫£nh trang b·ªã
        self.equipment: List[Item] = []  # Danh s√°ch c√°c v·∫≠t ph·∫©m ƒë√£ trang b·ªã
        self.inventory: List[Item] = []  # Kho ƒë·ªì ch·ª©a c√°c v·∫≠t ph·∫©m
        self.achievements: List[Item] = []  # C√°c th√†nh t√≠ch d∆∞·ªõi d·∫°ng v·∫≠t ph·∫©m (n·∫øu c√≥)
        self.unlocked_achievements = set()  # T·∫≠p h·ª£p c√°c ID th√†nh t√≠ch ƒë√£ m·ªü kh√≥a
        
        # Ch·ªâ s·ªë c·∫•p ƒë·ªô v√† kinh nghi·ªám
        self.level: int = 1
        self.xp: int = 0
        self.xp_to_next_level: int = 100
        
        # Ch·ªâ s·ªë chi·∫øn ƒë·∫•u v√† thu·ªôc t√≠nh
        self.hp: int = 50
        self.dex: int = 1  # Kh√©o l√©o -> TƒÉng XP nh·∫≠n ƒë∆∞·ª£c
        self.int: int = 1  # Tr√≠ tu·ªá -> Gi·∫£m h√¨nh ph·∫°t
        self.luk: int = 1  # May m·∫Øn -> TƒÉng v√†ng nh·∫≠n ƒë∆∞·ª£c
        self.available_points: int = 0  # ƒêi·ªÉm c·ªông c√≥ s·∫µn ƒë·ªÉ tƒÉng ch·ªâ s·ªë
        
        # T√†i s·∫£n
        self.gold: int = 10
        print(f"Nh√¢n v·∫≠t '{self.name}' ƒë√£ ƒë∆∞·ª£c t·∫°o v·ªõi {self.xp} XP v√† {self.gold} V√†ng.")

    def check_level_up(self):
        """
        Ki·ªÉm tra n·∫øu nh√¢n v·∫≠t ƒë·ªß XP ƒë·ªÉ l√™n c·∫•p.
        L·∫∑p cho ƒë·∫øn khi kh√¥ng ƒë·ªß XP ƒë·ªÉ l√™n c·∫•p n·ªØa.
        """
        leveled_up = False
        while self.xp >= self.xp_to_next_level:
            leveled_up = True
            self.xp -= self.xp_to_next_level
            self.level += 1
            self.available_points += 1
            # L∆∞·ª£ng XP c·∫ßn cho c·∫•p ti·∫øp theo tƒÉng theo c·∫•p s·ªë nh√¢n
            self.xp_to_next_level = int(self.xp_to_next_level * 1.5)
            
            print(f"üéâ CH√öC M·ª™NG! {self.name} ƒë√£ l√™n c·∫•p {self.level}!")
            print(f"   B·∫°n nh·∫≠n ƒë∆∞·ª£c 1 ƒëi·ªÉm c·ªông. XP c·∫ßn cho c·∫•p ti·∫øp theo: {self.xp_to_next_level}.")
        return leveled_up

    def add_achievement(self, achievement_id: str):
        """Th√™m ID c·ªßa m·ªôt th√†nh t√≠ch ƒë√£ m·ªü kh√≥a v√†o danh s√°ch."""
        if achievement_id not in self.unlocked_achievements:
            self.unlocked_achievements.add(achievement_id)
            print(f"üèÜ TH√ÄNH T√çCH M·ªöI ƒê∆Ø·ª¢C M·ªû KH√ìA: {achievement_id}")

    def update_appearance(self):
        """(M√¥ ph·ªèng) C·∫≠p nh·∫≠t ngo·∫°i h√¨nh nh√¢n v·∫≠t d·ª±a tr√™n trang b·ªã ƒëang m·∫∑c."""
        print("ƒêang c·∫≠p nh·∫≠t ngo·∫°i h√¨nh nh√¢n v·∫≠t...")
        print(f"Ngo·∫°i h√¨nh ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t d·ª±a tr√™n {len(self.equipment)} trang b·ªã.")

    def show_stats(self):
        """Hi·ªÉn th·ªã c√°c ch·ªâ s·ªë hi·ªán t·∫°i c·ªßa nh√¢n v·∫≠t m·ªôt c√°ch tr·ª±c quan."""
        print("\n--- TR·∫†NG TH√ÅI NH√ÇN V·∫¨T ---")
        print(f"T√™n: {self.name}")
        print(f"C·∫•p ƒë·ªô: {self.level}")
        print(f"Kinh nghi·ªám: {self.xp}/{self.xp_to_next_level}")
        print(f"V√†ng: {self.gold}")
        print(f"ƒêi·ªÉm c·ªông c√≥ s·∫µn: {self.available_points}")
        print(f"Ch·ªâ s·ªë: HP({self.hp}), DEX({self.dex}), INT({self.int}), LUK({self.luk})")
        print(f"Kho ƒë·ªì: {[item.name for item in self.inventory] or ['Tr·ªëng']}")
        print(f"Th√†nh t√≠ch: {list(self.unlocked_achievements) or ['Ch∆∞a c√≥']}")
        print("--------------------------\n")

class RewardSystem:
    """
    Qu·∫£n l√Ω vi·ªác t√≠nh to√°n v√† trao th∆∞·ªüng/ph·∫°t cho nh√¢n v·∫≠t.
    L·ªõp n√†y t√°ch bi·ªát logic th∆∞·ªüng ra kh·ªèi c√°c h·ªá th·ªëng kh√°c.
    """
    def __init__(self):
        self.reward_types: List[str] = ["xp", "gold", "item", "achievement"]

    def calculate_xp(self, character: Character, difficulty: int) -> int:
        """T√≠nh to√°n l∆∞·ª£ng XP nh·∫≠n ƒë∆∞·ª£c d·ª±a tr√™n ƒë·ªô kh√≥ v√† ch·ªâ s·ªë DEX."""
        base_xp = difficulty * 20
        modifier = 1 + (character.dex * 0.02)  # M·ªói ƒëi·ªÉm DEX tƒÉng 2% XP
        final_xp = int(base_xp * modifier)
        return final_xp

    def calculate_currency(self, character: Character, difficulty: int) -> int:
        """T√≠nh to√°n l∆∞·ª£ng v√†ng nh·∫≠n ƒë∆∞·ª£c d·ª±a tr√™n ƒë·ªô kh√≥ v√† ch·ªâ s·ªë LUK."""
        base_gold = difficulty * 10
        modifier = 1 + (character.luk * 0.02)  # M·ªói ƒëi·ªÉm LUK tƒÉng 2% v√†ng
        final_gold = int(base_gold * modifier)
        return final_gold

    def grant_reward(self, character: Character, reward: Dict[str, Any]):
        """
        Trao m·ªôt ph·∫ßn th∆∞·ªüng c·ª• th·ªÉ cho nh√¢n v·∫≠t d·ª±a tr√™n m·ªôt dictionary.

        Args:
            character (Character): Nh√¢n v·∫≠t nh·∫≠n th∆∞·ªüng.
            reward (Dict): T·ª´ ƒëi·ªÉn ch·ª©a th√¥ng tin ph·∫ßn th∆∞·ªüng, v√≠ d·ª•:
                           {"type": "xp", "amount": 100}
                           {"type": "item", "item_object": <Item object>}
        """
        reward_type = reward.get("type")
        if not reward_type or reward_type not in self.reward_types:
            print(f"C·∫£nh b√°o: Lo·∫°i ph·∫ßn th∆∞·ªüng '{reward_type}' kh√¥ng h·ª£p l·ªá.")
            return

        try:
            if reward_type == "xp":
                amount = int(reward["amount"])
                character.xp += amount
                print(f"   + {amount} XP.")
                character.check_level_up() # T·ª± ƒë·ªông ki·ªÉm tra l√™n c·∫•p
            elif reward_type == "gold":
                amount = int(reward["amount"])
                character.gold += amount
                print(f"   + {amount} V√†ng.")
            elif reward_type == "item":
                item = reward.get("item_object")
                if isinstance(item, Item):
                    character.inventory.append(item)
                    print(f"   + V·∫≠t ph·∫©m: {item.name}.")
                else:
                    print("C·∫£nh b√°o: 'item_object' trong ph·∫ßn th∆∞·ªüng kh√¥ng ph·∫£i l√† m·ªôt Item h·ª£p l·ªá.")
        except (KeyError, TypeError, ValueError) as e:
            print(f"L·ªói d·ªØ li·ªáu ph·∫ßn th∆∞·ªüng: {e}. D·ªØ li·ªáu nh·∫≠n ƒë∆∞·ª£c: {reward}")

    def grant_quest_completion_reward(self, character: Character, quest: Dict[str, Any]):
        """
        T√≠nh to√°n v√† trao th∆∞·ªüng to√†n b·ªô khi ho√†n th√†nh m·ªôt nhi·ªám v·ª•.
        """
        difficulty = quest.get('difficulty', 1)
        print(f"\n--- Trao th∆∞·ªüng cho nhi·ªám v·ª•: '{quest['description']}' (ƒê·ªô kh√≥: {difficulty}) ---")
        
        # Th∆∞·ªüng XP
        xp_reward_amount = self.calculate_xp(character, difficulty)
        self.grant_reward(character, {"type": "xp", "amount": xp_reward_amount})

        # Th∆∞·ªüng V√†ng
        gold_reward_amount = self.calculate_currency(character, difficulty)
        self.grant_reward(character, {"type": "gold", "amount": gold_reward_amount})

        # Th∆∞·ªüng v·∫≠t ph·∫©m (n·∫øu c√≥)
        if quest.get('item_reward'):
            self.grant_reward(character, {"type": "item", "item_object": quest['item_reward']})
            
        print("--------------------------------" + "-"*len(quest['description']))

    def punish(self, character: Character, punishment: Dict[str, Any]):
        """
        Tr·ª´ng ph·∫°t nh√¢n v·∫≠t khi kh√¥ng ho√†n th√†nh m·ª•c ti√™u.
        Ch·ªâ s·ªë INT gi√∫p gi·∫£m thi·ªÉu h√¨nh ph·∫°t.
        """
        punishment_type = punishment.get("type")
        if punishment_type == "gold":
            base_amount = punishment.get("amount", 0)
            # M·ªói ƒëi·ªÉm INT gi·∫£m 2% l∆∞·ª£ng v√†ng b·ªã ph·∫°t, t·ªëi ƒëa gi·∫£m 80%
            reduction_modifier = max(0.2, 1 - (character.int * 0.02))
            final_amount = int(base_amount * reduction_modifier)
            
            character.gold -= final_amount
            # ƒê·∫£m b·∫£o v√†ng kh√¥ng b·ªã √¢m
            if character.gold < 0:
                character.gold = 0
            
            print(f"Nh√¢n v·∫≠t {character.name} b·ªã ph·∫°t {final_amount} v√†ng v√¨ kh√¥ng ho√†n th√†nh m·ª•c ti√™u.")
        else:
            print(f"Lo·∫°i h√¨nh ph·∫°t '{punishment_type}' kh√¥ng h·ª£p l·ªá.")


class Quest:
    """ƒê·∫°i di·ªán cho M·ªòT nhi·ªám v·ª• duy nh·∫•t. ƒê∆°n gi·∫£n v√† t·∫≠p trung."""
    def __init__(self, description: str, difficulty: int):
        self.quest_id: str = "quest_" + str(uuid.uuid4())
        self.description: str = description
        self.difficulty: int = difficulty
        self.is_completed: bool = False

    def to_dict(self) -> Dict[str, Any]:
        """Chuy·ªÉn ƒë·ªïi ƒë·ªëi t∆∞·ª£ng Quest th√†nh dictionary."""
        return {
            "quest_id": self.quest_id, "description": self.description,
            "difficulty": self.difficulty, "is_completed": self.is_completed
        }

class StudySession:
    """
    Qu·∫£n l√Ω m·ªôt phi√™n h·ªçc. ƒê√£ lo·∫°i b·ªè thu·ªôc t√≠nh 'tags'.
    """
    def __init__(
        self,
        goal_description: str,
        start_time: datetime,
        end_time: datetime,
        linked_quests: List[Quest]
    ):
        if start_time >= end_time: print("Th·ªùi gian k·∫øt th√∫c ph·∫£i sau th·ªùi gian b·∫Øt ƒë·∫ßu.")
        if not goal_description: print("M√¥ t·∫£ phi√™n h·ªçc kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.")
        if not linked_quests: print("Phi√™n h·ªçc ph·∫£i c√≥ √≠t nh·∫•t m·ªôt nhi·ªám v·ª• li√™n k·∫øt.")

        self.session_id: str = str(uuid.uuid4())
        self.goal_description: str = goal_description
        self.linked_quests: List[Quest] = linked_quests
        self.start_time: datetime = start_time
        self.end_time: datetime = end_time
        #Th·ªùi gian k·∫øt th√∫c th·∫≠t
        self.actual_end_time: Optional[datetime] = None
        self.status: str = 'Scheduled' #scheduled - running - finished
        self.rank: str = "N/A" #rank g·ªìm a,b,c,d,f

    def mark_quest_as_complete(self, quest_id: str):
        """T√¨m v√† ƒë√°nh d·∫•u m·ªôt quest trong c√°c quest li√™n k·∫øt l√† ƒë√£ ho√†n th√†nh."""
        quest_found = next((q for q in self.linked_quests if q.quest_id == quest_id), None)
        if quest_found and not quest_found.is_completed:
            quest_found.is_completed = True
            print(f"   -> Nhi·ªám v·ª• '{quest_found.description}' trong phi√™n h·ªçc ƒë√£ ƒë∆∞·ª£c ƒë√°nh d·∫•u ho√†n th√†nh!")
        elif not quest_found:
            print(f"L·ªói: Kh√¥ng t√¨m th·∫•y nhi·ªám v·ª• v·ªõi ID {quest_id} trong phi√™n h·ªçc n√†y.")

    @property
    def quest_progress(self) -> float:
        """Tr·∫£ v·ªÅ t·ª∑ l·ªá ho√†n th√†nh quest (0.0 ƒë·∫øn 1.0). ƒê√¢y l√† t·ªâ l·ªá s·ªë quest ƒë√£ l√†m so chia v·ªõi t·ªïng s·ªë quest d·ª± t√≠nh ph·∫£i l√†m"""
        completed_count = sum(1 for q in self.linked_quests if q.is_completed)
        total_count = len(self.linked_quests)
        return completed_count / total_count if total_count > 0 else 0.0

    def get_completed_quests(self) -> List[Quest]:
        """Tr·∫£ v·ªÅ danh s√°ch c√°c quest ƒë√£ ho√†n th√†nh trong phi√™n n√†y."""
        return [q for q in self.linked_quests if q.is_completed]

    def finish(self, end_time_override: Optional[datetime] = None):
        """Ho√†n t·∫•t phi√™n h·ªçc. H·∫°ng ƒë∆∞·ª£c quy·∫øt ƒë·ªãnh b·ªüi ƒëi·ªÉm s·ªë k·∫øt h·ª£p."""
        # Ki·ªÉm tra xem phi√™n h·ªçc c√≥ ƒëang ch·∫°y kh√¥ng, n·∫øu kh√¥ng th√¨ tho√°t
        if self.status != 'Running': return
        
        # ƒê√°nh d·∫•u phi√™n h·ªçc ƒë√£ k·∫øt th√∫c
        self.status = 'Finished'
        # Ghi l·∫°i th·ªùi gian k·∫øt th√∫c th·ª±c t·∫ø (d√πng th·ªùi gian ƒë∆∞·ª£c truy·ªÅn v√†o ho·∫∑c th·ªùi gian d·ª± ki·∫øn)
        self.actual_end_time = end_time_override if end_time_override else self.end_time
        
        # T√≠nh ƒëi·ªÉm ho√†n th√†nh nhi·ªám v·ª• (t·ª∑ l·ªá t·ª´ 0.0 ƒë·∫øn 1.0)
        quest_completion_score = self.quest_progress
        
        # T√≠nh th·ªùi gian th·ª±c t·∫ø ƒë√£ h·ªçc (ƒë∆°n v·ªã: gi√¢y)
        time_spent_seconds = (self.actual_end_time - self.start_time).total_seconds()
        # T√≠nh th·ªùi gian d·ª± ki·∫øn ban ƒë·∫ßu (ƒë∆°n v·ªã: gi√¢y)
        time_planned_seconds = (self.end_time - self.start_time).total_seconds()
        # T√≠nh t·ª∑ l·ªá th·ªùi gian th·ª±c t·∫ø so v·ªõi d·ª± ki·∫øn
        time_ratio = time_spent_seconds / time_planned_seconds if time_planned_seconds > 0 else 1.0
        # T√≠nh ƒëi·ªÉm th∆∞·ªüng hi·ªáu qu·∫£ th·ªùi gian (c√†ng h·ªçc √≠t th·ªùi gian c√†ng ƒë∆∞·ª£c th∆∞·ªüng)
        time_efficiency_bonus = max(0, 1 - time_ratio)

        # ƒê·∫∑t tr·ªçng s·ªë cho hai y·∫øu t·ªë ch·∫•m ƒëi·ªÉm
        quest_weight = 0.5  # Ho√†n th√†nh nhi·ªám v·ª• chi·∫øm 50%
        time_weight = 0.5   # Hi·ªáu qu·∫£ th·ªùi gian chi·∫øm 50%
        # T√≠nh ƒëi·ªÉm t·ªïng k·∫øt d·ª±a tr√™n tr·ªçng s·ªë
        final_performance_score = (quest_completion_score * quest_weight) + (time_efficiency_bonus * time_weight)
        
        # X·∫øp h·∫°ng d·ª±a tr√™n ƒëi·ªÉm t·ªïng k·∫øt
        if final_performance_score >= 0.85: self.rank = 'S'      # Xu·∫•t s·∫Øc (‚â•85%)
        elif final_performance_score >= 0.70: self.rank = 'A'    # Gi·ªèi (70-84%)
        elif final_performance_score >= 0.55: self.rank = 'B'    # Kh√° (55-69%)
        elif final_performance_score >= 0.40: self.rank = 'C'    # Trung b√¨nh (40-54%)
        else: self.rank = 'F'                                    # Y·∫øu (<40%)

        # Chuy·ªÉn ƒë·ªïi t·ª∑ l·ªá ho√†n th√†nh th√†nh ph·∫ßn trƒÉm ƒë·ªÉ hi·ªÉn th·ªã
        progress_percent = f"{int(quest_completion_score * 100)}%"
        # In th√¥ng b√°o k·∫øt qu·∫£ phi√™n h·ªçc
        print(f"Phi√™n h·ªçc '{self.goal_description}' ƒë√£ k·∫øt th√∫c v·ªõi H·∫°ng: {self.rank} (Ho√†n th√†nh {progress_percent} nhi·ªám v·ª•, ƒëi·ªÉm: {final_performance_score:.2f}).")

    def get_session_data(self) -> Dict[str, Any]:
        """Tr·∫£ v·ªÅ d·ªØ li·ªáu t√≥m t·∫Øt c·ªßa phi√™n h·ªçc, kh√¥ng c√≥ 'tags'."""
        # T√≠nh th·ªùi l∆∞·ª£ng th·ª±c t·∫ø c·ªßa phi√™n h·ªçc (n·∫øu ƒë√£ k·∫øt th√∫c) ho·∫∑c 0 (n·∫øu ch∆∞a k·∫øt th√∫c)
        duration = self.actual_end_time - self.start_time if self.actual_end_time else timedelta(0)
        # Tr·∫£ v·ªÅ dictionary ch·ª©a t·∫•t c·∫£ th√¥ng tin quan tr·ªçng c·ªßa phi√™n h·ªçc
        return {
            "session_id": self.session_id,                           # ID duy nh·∫•t c·ªßa phi√™n h·ªçc
            "goal": self.goal_description,                           # M√¥ t·∫£ m·ª•c ti√™u phi√™n h·ªçc
            "status": self.status,                                   # Tr·∫°ng th√°i hi·ªán t·∫°i (Scheduled/Running/Finished)
            "start_time": self.start_time,                          # Th·ªùi gian b·∫Øt ƒë·∫ßu d·ª± ki·∫øn
            "end_time": self.end_time,                              # Th·ªùi gian k·∫øt th√∫c d·ª± ki·∫øn
            "rank": self.rank,                                      # H·∫°ng ƒë·∫°t ƒë∆∞·ª£c (S/A/B/C/F)
            "duration_seconds": duration.total_seconds(),           # Th·ªùi l∆∞·ª£ng th·ª±c t·∫ø t√≠nh b·∫±ng gi√¢y
            "linked_quests_data": [q.to_dict() for q in self.linked_quests]  # Danh s√°ch d·ªØ li·ªáu c√°c nhi·ªám v·ª• li√™n k·∫øt
        }

class QuestSystem:
    """Qu·∫£n l√Ω t·∫•t c·∫£ c√°c ƒë·ªëi t∆∞·ª£ng Quest."""
    def __init__(self):
        self.active_quests: Dict[str, Quest] = {}

    def create_quest(self, description: str, difficulty: int) -> Quest:
        """T·∫°o m·ªôt ƒë·ªëi t∆∞·ª£ng Quest m·ªõi, l∆∞u tr·ªØ v√† tr·∫£ v·ªÅ n√≥."""
        quest = Quest(description, difficulty)
        self.active_quests[quest.quest_id] = quest
        return quest

    def get_completed_quests_count(self) -> int:
        """ƒê·∫øm s·ªë l∆∞·ª£ng quest ƒë√£ ƒë∆∞·ª£c ƒë√°nh d·∫•u l√† ho√†n th√†nh."""
        return sum(1 for quest in self.active_quests.values() if quest.is_completed)

class StudyAnalytics:
    """
    Cung c·∫•p c√°c ph√¢n t√≠ch v√† th·ªëng k√™ chi ti·∫øt v·ªÅ hi·ªáu su·∫•t h·ªçc t·∫≠p c·ªßa ng∆∞·ªùi d√πng.
    """
    def __init__(self, quest_system: QuestSystem):
        self.session_history: List[Dict[str, Any]] = []
        self.quest_system = quest_system
        self.aggregated_stats: Dict[str, Any] = self._get_initial_stats()
        self.focus_streak: int = 0
        self.quest_system = quest_system
        self.unlockable_achievements = {
            'BuocDiDauTien': {'metric': 'total_sessions', 'value': 1, 'name': 'B∆∞·ªõc ƒêi ƒê·∫ßu Ti√™n'},
            'HocVienXuatSac': {'metric': 'rank_counts.S', 'value': 1, 'name': 'H·ªçc Vi√™n Xu·∫•t S·∫Øc'},
            'ChamChiCanCu': {'metric': 'total_study_hours', 'value': 0.01, 'name': 'ChƒÉm Ch·ªâ C·∫ßn C√π'},
            'BacThayNhiemVu': {'metric': 'quests_completed', 'value': 2, 'name': 'B·∫≠c Th·∫ßy Nhi·ªám V·ª•'},
            'Chuoi3Ngay': {'metric': 'focus_streak', 'value': 2, 'name': 'Chu·ªói 2 Ng√†y'}
        }

    def _get_initial_stats(self) -> Dict[str, Any]:
        """Kh·ªüi t·∫°o dictionary th·ªëng k√™, kh√¥ng c√≥ 'time_by_tag'."""
        return {
            'total_study_seconds': 0, 'total_study_hours': 0, 'total_sessions': 0,
            'rank_counts': {'S': 0, 'A': 0, 'B': 0, 'C': 0, 'F': 0},
            'average_session_duration_minutes': 0, 'average_rank_score': 0,
            'quests_completed': 0, 'quest_completion_rate': 0
        }

    def log_session(self, session_data: Dict[str, Any]):
        """Ghi l·∫°i m·ªôt phi√™n h·ªçc ƒë√£ k·∫øt th√∫c v√† g·ªçi h√†m c·∫≠p nh·∫≠t th·ªëng k√™."""
        self.session_history.append(session_data)
        self._update_stats()

    def _update_stats(self):
        """T√≠nh to√°n l·∫°i th·ªëng k√™, kh√¥ng x·ª≠ l√Ω 'tags'."""
        stats = self._get_initial_stats()
        rank_map = {'S': 5, 'A': 4, 'B': 3, 'C': 2, 'F': 0}
        total_rank_score = 0
        
        for session in self.session_history:
            stats['total_sessions'] += 1
            stats['total_study_seconds'] += session.get('duration_seconds', 0)
            
            rank = session.get('rank', 'N/A')
            if rank in stats['rank_counts']:
                stats['rank_counts'][rank] += 1
                total_rank_score += rank_map.get(rank, 0)
        # T√≠nh to√°n c√°c ch·ªâ s·ªë cu·ªëi c√πng
        stats['total_study_hours'] = stats['total_study_seconds'] / 3600
        if stats['total_sessions'] > 0:
            stats['average_session_duration_minutes'] = (stats['total_study_seconds'] / stats['total_sessions']) / 60
            stats['average_rank_score'] = total_rank_score / stats['total_sessions']

        # L·∫•y d·ªØ li·ªáu t·ª´ h·ªá th·ªëng nhi·ªám v·ª•
        stats['quests_completed'] = self.quest_system.get_completed_quests_count()
        total_quests = len(self.quest_system.active_quests)
        if total_quests > 0:
            stats['quest_completion_rate'] = (stats['quests_completed'] / total_quests) * 100

        self.aggregated_stats = stats
        self.focus_streak = self._calculate_focus_streak()

    def _calculate_focus_streak(self) -> int:
        """T√≠nh s·ªë ng√†y h·ªçc li√™n ti·∫øp."""
        if not self.session_history: return 0
        
        # L·∫•y danh s√°ch c√°c ng√†y h·ªçc duy nh·∫•t v√† s·∫Øp x·∫øp ch√∫ng
        study_dates = sorted(list(set(s['end_time'].date() for s in self.session_history)))
        if not study_dates: return 0
        
        streak = 0
        # Ch·ªâ b·∫Øt ƒë·∫ßu t√≠nh chu·ªói n·∫øu ng√†y h·ªçc cu·ªëi c√πng l√† h√¥m nay ho·∫∑c h√¥m qua
        if study_dates[-1] >= date.today() - timedelta(days=1):
            streak = 1
            # L·∫∑p ng∆∞·ª£c t·ª´ cu·ªëi danh s√°ch ƒë·ªÉ ki·ªÉm tra t√≠nh li√™n t·ª•c
            for i in range(len(study_dates) - 1, 0, -1):
                if study_dates[i] - study_dates[i-1] == timedelta(days=1):
                    streak += 1
                else:
                    break  # Ng·∫Øt chu·ªói n·∫øu c√≥ kho·∫£ng tr·ªëng
        return streak

    def check_unlockable_achievements(self, character: Character):
        """Ki·ªÉm tra v√† m·ªü kh√≥a th√†nh t√≠ch cho nh√¢n v·∫≠t."""
        for ach_id, criteria in self.unlockable_achievements.items():
            if ach_id in character.unlocked_achievements: continue

            # L·∫•y gi√° tr·ªã th·ªëng k√™ c·∫ßn ki·ªÉm tra
            metric_path = criteria['metric'].split('.')
            value_to_check = self.aggregated_stats
            try:
                for key in metric_path: value_to_check = value_to_check[key]
            except KeyError: continue

            # So s√°nh v·ªõi gi√° tr·ªã y√™u c·∫ßu v√† m·ªü kh√≥a
            if value_to_check >= criteria['value']:
                character.add_achievement(ach_id)
                
    def generate_report(self) -> str:
        """T·∫°o b√°o c√°o chi ti·∫øt, kh√¥ng c√≥ ph·∫ßn 'Time Breakdown by Tag'."""
        stats = self.aggregated_stats
        report_lines = [
            "üìä======= B√ÅO C√ÅO H·ªåC T·∫¨P C·ª¶A B·∫†N =======üìä",
            # ... c√°c d√≤ng b√°o c√°o kh√°c gi·ªØ nguy√™n ...
            f"   S: {stats['rank_counts']['S']} | A: {stats['rank_counts']['A']} | B: {stats['rank_counts']['B']} | C: {stats['rank_counts']['C']} | F: {stats['rank_counts']['F']}",
            "",
            "--- Nhi·ªám V·ª• ---",
            f"üéØ Nhi·ªám V·ª• Ho√†n Th√†nh: {stats['quests_completed']} / {len(self.quest_system.active_quests)}",
            f"   T·ª∑ L·ªá Ho√†n Th√†nh: {stats['quest_completion_rate']:.1f}%",
            "=========================================="
        ]
        return "\n".join(report_lines)



class SessionManager:
    """
    B·ªô ƒëi·ªÅu khi·ªÉn trung t√¢m cho t·∫•t c·∫£ c√°c phi√™n h·ªçc.
    ƒê√¢y l√† class ƒëi·ªÅu ph·ªëi ho·∫°t ƒë·ªông c·ªßa c√°c h·ªá th·ªëng kh√°c nh∆∞
    StudySession, RewardSystem, v√† StudyAnalytics.
    """
    def __init__(self, character: Character, reward_system: RewardSystem, analytics: StudyAnalytics):
        # L∆∞u tr·ªØ tham chi·∫øu ƒë·∫øn c√°c h·ªá th·ªëng c·ªët l√µi kh√°c
        self.sessions: List[StudySession] = []
        self.character = character
        self.reward_system = reward_system
        self.analytics = analytics

    def _find_session_by_id(self, session_id: str) -> Optional[StudySession]:
        """
        H√†m tr·ª£ gi√∫p n·ªôi b·ªô ƒë·ªÉ t√¨m m·ªôt phi√™n h·ªçc trong danh s√°ch theo ID.
        
        Returns:
            StudySession ho·∫∑c None n·∫øu kh√¥ng t√¨m th·∫•y.
        """
        for s in self.sessions:
            if s.session_id == session_id:
                return s
        return None

    def schedule_session(
        self,
        goal_description: str,
        start_time: datetime,
        end_time: datetime,
        linked_quests: List[Quest]
    ) -> Optional[StudySession]:
        """
        X√°c th·ª±c v√† l√™n l·ªãch m·ªôt phi√™n h·ªçc m·ªõi.
        Thu·ªôc t√≠nh 'tags' ƒë√£ ƒë∆∞·ª£c lo·∫°i b·ªè kh·ªèi ph∆∞∆°ng th·ª©c n√†y.

        Returns:
            ƒê·ªëi t∆∞·ª£ng StudySession v·ª´a ƒë∆∞·ª£c t·∫°o n·∫øu th√†nh c√¥ng, ng∆∞·ª£c l·∫°i l√† None.
        """
        try:
            # (C√≥ th·ªÉ th√™m logic ki·ªÉm tra tr√πng l·∫∑p th·ªùi gian ·ªü ƒë√¢y n·∫øu c·∫ßn)
            session = StudySession(goal_description, start_time, end_time, linked_quests)
            self.sessions.append(session)
            print(f"üóìÔ∏è  ƒê√É L√äN L·ªäCH: '{session.goal_description}' l√∫c {session.start_time.strftime('%H:%M:%S')}")
            return session
        except (ValueError, KeyError) as e:
            print(f"‚ùå L√äN L·ªäCH TH·∫§T B·∫†I: {e}")
            return None

    def mark_quest_as_complete(self, session_id: str, quest_id: str):
        """
        ƒê√°nh d·∫•u m·ªôt nhi·ªám v·ª• l√† ƒë√£ ho√†n th√†nh trong m·ªôt phi√™n h·ªçc ƒëang ch·∫°y.
        ƒê√¢y l√† "c·∫ßu n·ªëi" gi·ªØa giao di·ªán ng∆∞·ªùi d√πng v√† logic c·ªßa StudySession.
        """
        session = self._find_session_by_id(session_id)
        if session and session.status == 'Running':
            session.mark_quest_as_complete(quest_id)
        else:
            print("L·ªói: Kh√¥ng th·ªÉ ƒë√°nh d·∫•u nhi·ªám v·ª•. Phi√™n h·ªçc kh√¥ng ƒëang ch·∫°y ho·∫∑c kh√¥ng t·ªìn t·∫°i.")

    def update(self, current_time: datetime):
        """
        'Tick' ch√≠nh c·ªßa ·ª©ng d·ª•ng, ƒë∆∞·ª£c g·ªçi ƒë·ªãnh k·ª≥ ƒë·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i.
        T·ª± ƒë·ªông b·∫Øt ƒë·∫ßu v√† k·∫øt th√∫c c√°c phi√™n h·ªçc khi ƒë·∫øn gi·ªù.
        """
        for session in self.sessions[:]: # L·∫∑p tr√™n b·∫£n sao ƒë·ªÉ x√≥a an to√†n
            if session.status == 'Scheduled' and current_time >= session.start_time:
                session.status = 'Running'
                print(f"‚ñ∂Ô∏è  B·∫ÆT ƒê·∫¶U: '{session.goal_description}'")
            
            if session.status == 'Running' and current_time >= session.end_time:
                # G·ªçi finish() kh√¥ng c√≥ tham s·ªë -> k·∫øt th√∫c t·ª± ƒë·ªông khi h·∫øt gi·ªù
                session.finish()
                self._finalize_session(session)

    def end_session_manually(self, session_id: str):
        """
        X·ª≠ l√Ω y√™u c·∫ßu k·∫øt th√∫c m·ªôt phi√™n h·ªçc th·ªß c√¥ng t·ª´ ng∆∞·ªùi d√πng.
        """
        session = self._find_session_by_id(session_id)
        if session and session.status == 'Running':
            print(f"Ng∆∞·ªùi d√πng y√™u c·∫ßu k·∫øt th√∫c s·ªõm phi√™n '{session.goal_description}'.")
            # G·ªçi finish() v·ªõi th·ªùi gian hi·ªán t·∫°i l√†m tham s·ªë
            session.finish(end_time_override=datetime.now())
            self._finalize_session(session)
        else:
            print(f"L·ªói: Kh√¥ng t√¨m th·∫•y phi√™n h·ªçc ƒëang ch·∫°y v·ªõi ID {session_id}.")

    def _finalize_session(self, session: StudySession):
        """
        X·ª≠ l√Ω t·∫•t c·∫£ logic sau khi m·ªôt phi√™n h·ªçc k·∫øt th√∫c.
        ƒê√¢y l√† n∆°i t·∫≠p trung c√°c b∆∞·ªõc x·ª≠ l√Ω cu·ªëi c√πng.
        """
        if session.status != 'Finished': return
        
        # 1. Ghi l·∫°i d·ªØ li·ªáu ph√¢n t√≠ch
        self.analytics.log_session(session.get_session_data())
        
        # 2. √Åp d·ª•ng th∆∞·ªüng/ph·∫°t
        self._apply_session_consequences(session)
        
        # 3. Ki·ªÉm tra th√†nh t√≠ch m·ªõi (sau khi ƒë√£ c√≥ th∆∞·ªüng/ph·∫°t v√† c·∫≠p nh·∫≠t stats)
        self.analytics.check_unlockable_achievements(self.character)
        
        # 4. X√≥a phi√™n h·ªçc ƒë√£ k·∫øt th√∫c kh·ªèi danh s√°ch ƒëang ho·∫°t ƒë·ªông
        self.sessions.remove(session)

    def _apply_session_consequences(self, session: StudySession):
        """
        √Åp d·ª•ng th∆∞·ªüng cho c√°c nhi·ªám v·ª• ƒë√£ ho√†n th√†nh v√† th∆∞·ªüng/ph·∫°t d·ª±a tr√™n h·∫°ng.
        """
        completed_quests_in_session = session.get_completed_quests()

        # Ph·∫ßn th∆∞·ªüng ch√≠nh t·ª´ vi·ªác ho√†n th√†nh c√°c quest
        if completed_quests_in_session:
            print("\n--- B·∫Øt ƒë·∫ßu trao th∆∞·ªüng cho c√°c nhi·ªám v·ª• ƒë√£ ho√†n th√†nh ---")
            for quest in completed_quests_in_session:
                # G·ªçi h√†m trao th∆∞·ªüng t·ª´ RewardSystem cho t·ª´ng quest
                self.reward_system.grant_quest_completion_reward(self.character, quest.to_dict())
            print("------------------------------------------------------")
        
        # THAY ƒê·ªîI M·ªöI: Th√™m ph·∫ßn th∆∞·ªüng nh·ªè d·ª±a tr√™n h·∫°ng c·ªßa phi√™n h·ªçc
        # ƒê√¢y l√† ph·∫ßn th∆∞·ªüng khuy·∫øn kh√≠ch cho vi·ªác n·ªó l·ª±c v√† ƒë·∫°t k·∫øt qu·∫£ t·ªët
        rank_bonuses = {
            'S': {'type': 'gold', 'amount': 15}, # Th∆∞·ªüng nhi·ªÅu nh·∫•t
            'A': {'type': 'gold', 'amount': 10},
            'B': {'type': 'gold', 'amount': 5},
            'C': {'type': 'gold', 'amount': 2}   # Th∆∞·ªüng khuy·∫øn kh√≠ch
        }

        # N·∫øu h·∫°ng c·ªßa phi√™n h·ªçc n·∫±m trong danh s√°ch th∆∞·ªüng, h√£y trao th∆∞·ªüng
        if session.rank in rank_bonuses:
            print(f"Th∆∞·ªüng th√™m cho vi·ªác ƒë·∫°t H·∫°ng {session.rank}:")
            self.reward_system.grant_reward(self.character, rank_bonuses[session.rank])

        # √Åp d·ª•ng h√¨nh ph·∫°t n·∫øu h·∫°ng th·∫•p
        if session.rank == 'F':
            # Ph·∫°t d·ª±a tr√™n t·ªïng ƒë·ªô kh√≥ c·ªßa c√°c quest CH∆ØA ho√†n th√†nh
            total_difficulty_failed = sum(q.difficulty for q in session.linked_quests if not q.is_completed)
            if total_difficulty_failed > 0:
                print(f"Phi√™n h·ªçc k·∫øt th√∫c v·ªõi h·∫°ng F, √°p d·ª•ng h√¨nh ph·∫°t.")
                self.reward_system.punish(self.character, {'type': 'gold', 'amount': total_difficulty_failed * 5})

# --- V√ç D·ª§ M√î PH·ªéNG ---
# =============================================================================
if __name__ == "__main__":
    char = Character(name="Nh·∫≠t Nam")
    rewards = RewardSystem()
    
    # S·ª¨A ƒê·ªîI ·ªû ƒê√ÇY:
    # 1. T·∫°o m·ªôt ƒë·ªëi t∆∞·ª£ng QuestSystem.
    quests = QuestSystem() 
    # 2. Truy·ªÅn ƒë·ªëi t∆∞·ª£ng quests v√†o StudyAnalytics, kh√¥ng ph·∫£i None.
    analytics = StudyAnalytics(quest_system=quests) 
    
    # 3. SessionManager kh√¥ng c·∫ßn quest_system n·ªØa, v√¨ n√≥ kh√¥ng t·∫°o quest.
    # N√≥ ch·ªâ nh·∫≠n quest t·ª´ b√™n ngo√†i khi l√™n l·ªãch.
    manager = SessionManager(character=char, reward_system=rewards, analytics=analytics)
    
    # 2. T·∫°o c√°c ƒë·ªëi t∆∞·ª£ng Quest ri√™ng l·∫ª th√¥ng qua QuestSystem
    # C√°ch t·∫°o quest kh√¥ng thay ƒë·ªïi, ch·ªâ l√† gi·ªù ch√∫ng ƒë∆∞·ª£c qu·∫£n l√Ω b·ªüi `quests`.
    quest1 = quests.create_quest(description="Vi·∫øt ph·∫ßn M·ªü ƒë·∫ßu b√°o c√°o", difficulty=2)
    quest2 = quests.create_quest(description="Thi·∫øt k·∫ø Class Diagram", difficulty=4)
    quest3 = quests.create_quest(description="Vi·∫øt code cho 3 Class", difficulty=5)

    # 3. L√™n l·ªãch m·ªôt phi√™n h·ªçc v√† li√™n k·∫øt v·ªõi c√°c Quest ƒë√£ t·∫°o
    simulated_now = datetime.now()
    session1 = manager.schedule_session(
        goal_description="L√†m b√°o c√°o OOP - Giai ƒëo·∫°n 1",
        start_time=simulated_now + timedelta(seconds=2),
        end_time=simulated_now + timedelta(seconds=25), # Th·ªùi gian d·ª± ki·∫øn l√† 23 gi√¢y
        linked_quests=[quest1, quest2, quest3] # Truy·ªÅn danh s√°ch c√°c ƒë·ªëi t∆∞·ª£ng Quest
    )

    # ... ph·∫ßn c√≤n l·∫°i c·ªßa v√≤ng l·∫∑p m√¥ ph·ªèng gi·ªØ nguy√™n ...
    print("\n--- B·∫Øt ƒë·∫ßu V√≤ng l·∫∑p M√¥ ph·ªèng ---")
    end_of_simulation = simulated_now + timedelta(seconds=30)
    current_sim_time = simulated_now
    
    session_has_started = False
    
    while current_sim_time < end_of_simulation:
        print(f"\n--- Tick l√∫c {current_sim_time.strftime('%H:%M:%S')} ---")
        manager.update(current_time=current_sim_time)
        
        # M√¥ ph·ªèng ng∆∞·ªùi d√πng ho√†n th√†nh c√°c quest trong l√∫c h·ªçc
        if session1 and session1.status == 'Running':
            if not session_has_started:
                session_has_started = True
                print(">>> Phi√™n h·ªçc ƒëang ch·∫°y. Ng∆∞·ªùi d√πng b·∫Øt ƒë·∫ßu l√†m vi·ªác...")

            time_in_session = (current_sim_time - session1.start_time).total_seconds()
            
            # Sau 5 gi√¢y, ng∆∞·ªùi d√πng l√†m xong quest ƒë·∫ßu ti√™n
            if 5 <= time_in_session < 6 and not quest1.is_completed:
                manager.mark_quest_as_complete(session1.session_id, quest1.quest_id)
            
            # Sau 12 gi√¢y, l√†m xong quest th·ª© hai
            if 12 <= time_in_session < 13 and not quest2.is_completed:
                manager.mark_quest_as_complete(session1.session_id, quest2.quest_id)
            
            # Ng∆∞·ªùi d√πng quy·∫øt ƒë·ªãnh k·∫øt th√∫c s·ªõm sau 18 gi√¢y
            if 18 <= time_in_session < 19:
                manager.end_session_manually(session1.session_id)
                break

        time.sleep(1)
        current_sim_time += timedelta(seconds=1)
        
    print("\n\n--- M√î PH·ªéNG K·∫æT TH√öC ---")
    # In ra b√°o c√°o cu·ªëi c√πng n·∫øu c·∫ßn
    print(analytics.generate_report())
    char.show_stats()