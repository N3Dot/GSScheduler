from datetime import datetime, timedelta, date
from typing import List, Dict, Any, Optional, Tuple, Callable
from kivy.event import EventDispatcher
from kivy.properties import StringProperty, NumericProperty
from enum import Enum
from datetime import datetime
from kivy.utils import platform
from io import BytesIO
import uuid
import random
import time
import json
import os
import qrcode
import base64
import gzip
if __name__ == "__main__":
    from Database import Item, Rarity, Items
else:
    from Backend.Database import Item, Rarity, Items, Achievements

# ƒê·ªãnh nghƒ©a BASE_DATE v√† h√†m ti·ªán √≠ch
BASE_DATE = datetime(1900, 1, 1)

def to_basedate_time(dt: datetime) -> datetime:
    """Chuy·ªÉn m·ªçi datetime v·ªÅ BASE_DATE, ch·ªâ gi·ªØ l·∫°i gi·ªù v√† ph√∫t."""
    return BASE_DATE.replace(hour=dt.hour, minute=dt.minute, second=0, microsecond=0)

class Character(EventDispatcher):
    """
    ƒê·∫°i di·ªán cho ng∆∞·ªùi d√πng trong ·ª©ng d·ª•ng.
    L·ªõp n√†y qu·∫£n l√Ω t·∫•t c·∫£ c√°c ch·ªâ s·ªë, t√†i s·∫£n, trang b·ªã, v√† ti·∫øn tr√¨nh c·ªßa nh√¢n v·∫≠t.
    """
    name = StringProperty("Nguy·ªÖn VƒÉn A")
    level = NumericProperty(1)
    xp = NumericProperty(0)
    xp_to_next_level = NumericProperty(100)
    hp = NumericProperty(50)
    max_hp = NumericProperty(50)
    dex = NumericProperty(1)  # Kh√©o l√©o -> TƒÉng XP nh·∫≠n ƒë∆∞·ª£c
    int = NumericProperty(1)  # Tr√≠ tu·ªá -> Gi·∫£m h√¨nh ph·∫°t
    luk = NumericProperty(1)  # May m·∫Øn -> TƒÉng v√†ng nh·∫≠n ƒë∆∞·ª£c
    available_points = NumericProperty(0)  # ƒêi·ªÉm c·ªông c√≥ s·∫µn ƒë·ªÉ tƒÉng ch·ªâ s·ªë
    gold = NumericProperty(10)

    def __init__(self, name: str, **kwargs):
        super().__init__(**kwargs)
        self.name: str = name
        self.equipment: List[Item] = []  # Danh s√°ch c√°c v·∫≠t ph·∫©m ƒë√£ trang b·ªã
        self.inventory: List[Item] = []  # Kho ƒë·ªì ch·ª©a c√°c v·∫≠t ph·∫©m
        self.unlocked_achievements = set()  # T·∫≠p h·ª£p c√°c ID th√†nh t√≠ch ƒë√£ m·ªü kh√≥a
        
        # Ch·ªâ s·ªë c·∫•p ƒë·ªô v√† kinh nghi·ªám
        self.level: int = 1
        self.xp: int = 0
        self.xp_to_next_level: int = 100
        
        # Ch·ªâ s·ªë chi·∫øn ƒë·∫•u v√† thu·ªôc t√≠nh
        self.hp: int = 50
        self.max_hp: int = 50
        self.dex: int = 1  # Kh√©o l√©o -> TƒÉng XP nh·∫≠n ƒë∆∞·ª£c
        self.int: int = 1  # Tr√≠ tu·ªá -> Gi·∫£m h√¨nh ph·∫°t
        self.luk: int = 1  # May m·∫Øn -> TƒÉng v√†ng nh·∫≠n ƒë∆∞·ª£c
        self.available_points: int = 0 # ƒêi·ªÉm c·ªông c√≥ s·∫µn ƒë·ªÉ tƒÉng ch·ªâ s·ªë
        
        # T√†i s·∫£n
        self.gold: int = 10
        print(f"Nh√¢n v·∫≠t '{self.name}' ƒë√£ ƒë∆∞·ª£c t·∫°o v·ªõi {self.xp} XP v√† {self.gold} V√†ng.")

    def check_negative_stats(self):
        """
        Ki·ªÉm tra c√°c ch·ªâ s·ªë n·∫øu b·ªã √¢m th√¨ ƒë·∫∑t l·∫°i th√†nh 0.
        """
        for stat in ['hp','max_hp','dex', 'int', 'luk', 'gold', 'xp']:
            value = getattr(self, stat, 0)
            if value < 0:
                setattr(self, stat, 0)

    def check_level_up(self):
        """
        Ki·ªÉm tra n·∫øu nh√¢n v·∫≠t ƒë·ªß XP ƒë·ªÉ l√™n c·∫•p.
        L·∫∑p cho ƒë·∫øn khi kh√¥ng ƒë·ªß XP ƒë·ªÉ l√™n c·∫•p n·ªØa.
        """
        leveled_up = False
        while self.xp >= self.xp_to_next_level:
            leveled_up = True
            self.xp -= self.xp_to_next_level
            self.level += 1
            self.available_points += 1
            # L∆∞·ª£ng XP c·∫ßn cho c·∫•p ti·∫øp theo tƒÉng theo c·∫•p s·ªë nh√¢n
            self.xp_to_next_level = int(self.xp_to_next_level * 1.25)
            
            print(f"{self.name} ƒë√£ l√™n c·∫•p {self.level}!")
        return leveled_up

    def add_achievement(self, achievement_id: str):
        """Th√™m ID c·ªßa m·ªôt th√†nh t√≠ch ƒë√£ m·ªü kh√≥a v√†o danh s√°ch."""
        if achievement_id not in self.unlocked_achievements:
            self.unlocked_achievements.add(achievement_id)
            print(f"üèÜ TH√ÄNH T√çCH M·ªöI ƒê∆Ø·ª¢C M·ªû KH√ìA: {achievement_id}")

    def show_stats(self):
        """Hi·ªÉn th·ªã c√°c ch·ªâ s·ªë hi·ªán t·∫°i c·ªßa nh√¢n v·∫≠t m·ªôt c√°ch tr·ª±c quan."""
        print("\n--- TR·∫†NG TH√ÅI NH√ÇN V·∫¨T ---")
        print(f"T√™n: {self.name}")
        print(f"C∆° b·∫£n: HP({self.hp}/{self.max_hp}), DEX({self.dex}), INT({self.int}), LUK({self.luk})")
        print(f"Trang b·ªã: {[item.name for item in self.equipment] or ['Kh√¥ng c√≥']}")
        print(f"Kho ƒë·ªì: {[item.name for item in self.inventory] or ['Tr·ªëng']}")
        print(f"Th√†nh t√≠ch: {list(self.unlocked_achievements) or ['Ch∆∞a c√≥']}")
        print("--------------------------\n")
    
    def use_item(self, item: Item):
        """
        X·ª≠ l√Ω logic khi nh√¢n v·∫≠t s·ª≠ d·ª•ng v·∫≠t ph·∫©m n√†y.
        """
        print(f"{self.name} ƒë√£ s·ª≠ d·ª•ng {item.name}.")
        # √Åp d·ª•ng stat bonuses t·ª´ on_use_effect
        if item.on_use_effect:
            for stat, bonus in item.on_use_effect.items():
                if hasattr(self, stat):
                    current_value = getattr(self, stat)
                    setattr(self, stat, current_value + bonus)

        # X√≥a v·∫≠t ph·∫©m kh·ªèi kho ƒë·ªì c·ªßa nh√¢n v·∫≠t n·∫øu n√≥ l√† lo·∫°i ti√™u hao
        if item in self.inventory:
            self.inventory.remove(item)
    
    def equip(self, item: Item):
        # Ki·ªÉm tra item c√≥ trong inventory kh√¥ng
        if item not in self.inventory:
            return f"Kh√¥ng t√¨m th·∫•y '{item.name}' trong kho ƒë·ªì."

        # N·∫øu ƒë√£ c√≥ trang b·ªã c√πng category th√¨ unequip n√≥ tr∆∞·ªõc
        existing_equipped = next((i for i in self.equipment if i.category == item.category), None)
        if existing_equipped:
            print(f"ƒêang c√≥ trang b·ªã '{existing_equipped.name}' c√πng lo·∫°i. G·ª° ra tr∆∞·ªõc khi trang b·ªã '{item.name}'.")
            Flag = self.unequip(existing_equipped)
            if isinstance(Flag, str):
                return Flag

        # Trang b·ªã item m·ªõi
        self.equipment.append(item)
        self.inventory.remove(item)

        # TƒÉng ch·ªâ s·ªë
        for stat, bonus in item.on_use_effect.items():
            if stat == 'hp':
                self.max_hp += bonus
            elif hasattr(self, stat):
                setattr(self, stat, getattr(self, stat) + bonus)

        print(f"ƒê√£ trang b·ªã '{item.name}'.")
        self.validate_health()
        return True

    def unequip(self, item: Item):
        # Ki·ªÉm tra item c√≥ trong equipment kh√¥ng
        if item not in self.equipment:
            return f"'{item.name}' kh√¥ng c√≥ trong trang b·ªã."

        # ∆Ø·ªõc l∆∞·ª£ng t√°c ƒë·ªông c·ªßa vi·ªác g·ª° b·ªè item
        simulated_max_hp = self.max_hp
        simulated_hp = self.hp

        for stat, bonus in item.on_use_effect.items():
            if stat == 'hp':
                simulated_hp -= bonus
            elif stat == 'max_hp':
                simulated_max_hp -= bonus  # Trong tr∆∞·ªùng h·ª£p b·∫°n d√πng 'max_hp' ri√™ng bi·ªát

        # Ki·ªÉm tra n·∫øu max_hp ho·∫∑c hp sau khi g·ª° <= 0
        if simulated_max_hp <= 0 or simulated_hp <= 0:
            return f"Kh√¥ng th·ªÉ g·ª° '{item.name}' v√¨ s·∫Ω khi·∫øn HP b·ªã √¢m ho·∫∑c b·∫±ng 0!"

        # G·ª° trang b·ªã
        self.equipment.remove(item)
        self.inventory.append(item)

        # Gi·∫£m ch·ªâ s·ªë
        for stat, bonus in item.on_use_effect.items():
            if stat == 'hp':
                self.max_hp -= bonus
            elif hasattr(self, stat):
                setattr(self, stat, getattr(self, stat) - bonus)

        print(f"ƒê√£ g·ª° trang b·ªã '{item.name}'.")
        self.check_negative_stats()
        self.validate_health()
        return True

    def validate_health(self):
        if self.hp > self.max_hp:
            self.hp = self.max_hp

class Shop:
    def __init__(self, Character: Character):
        self.current_stock: List[Item] = []
        for key in Items:
            item_to_add = Items[key]
            if (item_to_add.category == "Ti√™u Hao") or (item_to_add not in Character.inventory and item_to_add not in Character.equipment):
                self.current_stock.append(Items[key])
            else:
                print(f"Item not added: {item_to_add}")
        self.current_stock.sort(key=lambda x: x.rarity.value, reverse=True)

class RewardSystem:
    """
    Qu·∫£n l√Ω vi·ªác t√≠nh to√°n v√† trao th∆∞·ªüng/ph·∫°t cho nh√¢n v·∫≠t.
    L·ªõp n√†y t√°ch bi·ªát logic th∆∞·ªüng ra kh·ªèi c√°c h·ªá th·ªëng kh√°c.
    """
    def __init__(self):
        self.reward_types: List[str] = ["xp", "gold", "item", "achievement"]
        self.public_messages = {'xp': 0, 'gold': 0}

    def calculate_xp(self, character: Character, difficulty: int) -> int:
        """T√≠nh to√°n l∆∞·ª£ng XP nh·∫≠n ƒë∆∞·ª£c d·ª±a tr√™n ƒë·ªô kh√≥ v√† ch·ªâ s·ªë DEX."""
        base_xp = difficulty * 20
        modifier = 1 + (character.dex * 0.02)  # M·ªói ƒëi·ªÉm DEX tƒÉng 2% XP
        final_xp = int(base_xp * modifier)
        return final_xp

    def calculate_currency(self, character: Character, difficulty: int) -> int:
        """T√≠nh to√°n l∆∞·ª£ng v√†ng nh·∫≠n ƒë∆∞·ª£c d·ª±a tr√™n ƒë·ªô kh√≥ v√† ch·ªâ s·ªë LUK."""
        base_gold = difficulty * 10
        modifier = 1 + (character.luk * 0.02)  # M·ªói ƒëi·ªÉm LUK tƒÉng 2% v√†ng
        final_gold = int(base_gold * modifier)
        return final_gold

    def grant_reward(self, character: Character, reward: Dict[str, Any]):
        """
        Trao m·ªôt ph·∫ßn th∆∞·ªüng c·ª• th·ªÉ cho nh√¢n v·∫≠t d·ª±a tr√™n m·ªôt dictionary.

        Args:
            character (Character): Nh√¢n v·∫≠t nh·∫≠n th∆∞·ªüng.
            reward (Dict): T·ª´ ƒëi·ªÉn ch·ª©a th√¥ng tin ph·∫ßn th∆∞·ªüng, v√≠ d·ª•:
                           {"type": "xp", "amount": 100}
                           {"type": "item", "item_object": <Item object>}
        """
        reward_type = reward.get("type")
        if not reward_type or reward_type not in self.reward_types:
            print(f"C·∫£nh b√°o: Lo·∫°i ph·∫ßn th∆∞·ªüng '{reward_type}' kh√¥ng h·ª£p l·ªá.")
            return

        try:
            if reward_type == "xp":
                amount = int(reward["amount"])
                character.xp += amount
                self.public_messages['xp'] += amount
                print(f"   + {amount} XP.")
                character.check_level_up() # T·ª± ƒë·ªông ki·ªÉm tra l√™n c·∫•p
            elif reward_type == "gold":
                amount = int(reward["amount"])
                character.gold += amount
                self.public_messages['gold'] += amount
                print(f"   + {amount} V√†ng.")
            elif reward_type == "item":
                item = reward.get("item_object")
                if isinstance(item, Item):
                    character.inventory.append(item)
                    print(f"   + V·∫≠t ph·∫©m: {item.name}.")
                else:
                    print("C·∫£nh b√°o: 'item_object' trong ph·∫ßn th∆∞·ªüng kh√¥ng ph·∫£i l√† m·ªôt Item h·ª£p l·ªá.")
        except (KeyError, TypeError, ValueError) as e:
            print(f"L·ªói d·ªØ li·ªáu ph·∫ßn th∆∞·ªüng: {e}. D·ªØ li·ªáu nh·∫≠n ƒë∆∞·ª£c: {reward}")

    def grant_quest_completion_reward(self, character: Character, quest: Dict[str, Any]):
        """
        T√≠nh to√°n v√† trao th∆∞·ªüng to√†n b·ªô khi ho√†n th√†nh m·ªôt nhi·ªám v·ª•.
        """
        difficulty = quest.get('difficulty', 1)
        print(f"\n--- Trao th∆∞·ªüng cho nhi·ªám v·ª•: '{quest['description']}' (ƒê·ªô kh√≥: {difficulty}) ---")
        
        # Th∆∞·ªüng XP
        xp_reward_amount = self.calculate_xp(character, difficulty)
        self.grant_reward(character, {"type": "xp", "amount": xp_reward_amount})

        # Th∆∞·ªüng V√†ng
        gold_reward_amount = self.calculate_currency(character, difficulty)
        self.grant_reward(character, {"type": "gold", "amount": gold_reward_amount})

        # Th∆∞·ªüng v·∫≠t ph·∫©m (n·∫øu c√≥)
        if quest.get('item_reward'):
            self.grant_reward(character, {"type": "item", "item_object": quest['item_reward']})
            
        print("--------------------------------" + "-"*len(quest['description']))

    def punish(self, character: Character, punishment: Dict[str, Any]):
        """
        Tr·ª´ng ph·∫°t nh√¢n v·∫≠t khi kh√¥ng ho√†n th√†nh m·ª•c ti√™u.
        Ch·ªâ s·ªë INT gi√∫p gi·∫£m thi·ªÉu h√¨nh ph·∫°t.
        """
        punishment_type = punishment.get("type")
        if punishment_type == "hp":
            base_amount = punishment.get("amount", 0)
            # M·ªói ƒëi·ªÉm INT gi·∫£m 2% l∆∞·ª£ng m√°u b·ªã ph·∫°t, t·ªëi ƒëa gi·∫£m 80%
            reduction_modifier = max(0.2, 1 - (character.int * 0.02))
            final_amount = int(base_amount * reduction_modifier)
            
            character.hp -= final_amount
            # ƒê·∫£m b·∫£o m√°u kh√¥ng b·ªã √¢m
            if character.hp < 0:
                character.hp = 0
            
            print(f"Nh√¢n v·∫≠t {character.name} b·ªã ph·∫°t {final_amount} m√°u v√¨ kh√¥ng ho√†n th√†nh m·ª•c ti√™u.")
        else:
            print(f"Lo·∫°i h√¨nh ph·∫°t '{punishment_type}' kh√¥ng h·ª£p l·ªá.")


class Quest:
    """ƒê·∫°i di·ªán cho M·ªòT nhi·ªám v·ª• duy nh·∫•t. ƒê∆°n gi·∫£n v√† t·∫≠p trung."""
    def __init__(self, description: str, difficulty: int):
        self.quest_id: str = "quest_" + str(uuid.uuid4())
        self.description: str = description
        self.difficulty: int = difficulty
        self.is_completed: bool = False

    def to_dict(self) -> Dict[str, Any]:
        """Chuy·ªÉn ƒë·ªïi ƒë·ªëi t∆∞·ª£ng Quest th√†nh dictionary."""
        return {
            "quest_id": self.quest_id, "description": self.description,
            "difficulty": self.difficulty, "is_completed": self.is_completed
        }


class StudySession:
    """
    Qu·∫£n l√Ω m·ªôt phi√™n h·ªçc. ƒê√£ th√™m theo d√µi th·ªùi gian b·∫Øt ƒë·∫ßu th·ª±c t·∫ø.
    """
    def __init__(
        self,
        goal_description: str,
        start_time: datetime,
        end_time: datetime,
        linked_quests: List[Quest]
    ):
        if start_time >= end_time: print("Th·ªùi gian k·∫øt th√∫c ph·∫£i sau th·ªùi gian b·∫Øt ƒë·∫ßu.")
        if not goal_description: print("M√¥ t·∫£ phi√™n h·ªçc kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.")
        if not linked_quests: print("Phi√™n h·ªçc ph·∫£i c√≥ √≠t nh·∫•t m·ªôt nhi·ªám v·ª• li√™n k·∫øt.")

        self.session_id: str = str(uuid.uuid4())
        self.goal_description: str = goal_description
        self.linked_quests: List[Quest] = linked_quests
        # Ch·ªâ gi·ªØ gi·ªù v√† ph√∫t, b·ªè ng√†y
        self.start_time: datetime = to_basedate_time(start_time)
        self.end_time: datetime = to_basedate_time(end_time)      # Th·ªùi gian d·ª± ki·∫øn k·∫øt th√∫c
        
        # Th·ªùi gian th·ª±c t·∫ø
        self.actual_start_time: Optional[datetime] = None  # Th·ªùi gian b·∫Øt ƒë·∫ßu th·ª±c t·∫ø
        self.actual_end_time: Optional[datetime] = None    # Th·ªùi gian k·∫øt th√∫c th·ª±c t·∫ø
        
        self.status: str = 'Scheduled' #scheduled - running - finished
        self.rank: str = "N/A" #rank g·ªìm a,b,c,d,f
        self.active: bool = True #TODO

    def mark_quest_as_complete(self, quest_id: str):
        """T√¨m v√† ƒë√°nh d·∫•u m·ªôt quest trong c√°c quest li√™n k·∫øt l√† ƒë√£ ho√†n th√†nh."""
        quest_found = next((q for q in self.linked_quests if q.quest_id == quest_id), None)
        if quest_found and not quest_found.is_completed:
            quest_found.is_completed = True
            print(f"   -> Nhi·ªám v·ª• '{quest_found.description}' trong phi√™n h·ªçc ƒë√£ ƒë∆∞·ª£c ƒë√°nh d·∫•u ho√†n th√†nh!")
        elif not quest_found:
            print(f"L·ªói: Kh√¥ng t√¨m th·∫•y nhi·ªám v·ª• v·ªõi ID {quest_id} trong phi√™n h·ªçc n√†y.")
    
    @property
    def quest_progress(self) -> float:
        """Tr·∫£ v·ªÅ t·ª∑ l·ªá ho√†n th√†nh quest (0.0 ƒë·∫øn 1.0). ƒê√¢y l√† t·ªâ l·ªá s·ªë quest ƒë√£ l√†m so chia v·ªõi t·ªïng s·ªë quest d·ª± t√≠nh ph·∫£i l√†m"""
        completed_count = sum(1 for q in self.linked_quests if q.is_completed)
        total_count = len(self.linked_quests)
        return completed_count / total_count if total_count > 0 else 0.0

    def get_completed_quests(self) -> List[Quest]:
        """Tr·∫£ v·ªÅ danh s√°ch c√°c quest ƒë√£ ho√†n th√†nh trong phi√™n n√†y."""
        return [q for q in self.linked_quests if q.is_completed]

    def finish(self, end_time_override: Optional[datetime] = None):
        """Ho√†n t·∫•t phi√™n h·ªçc. H·∫°ng ƒë∆∞·ª£c quy·∫øt ƒë·ªãnh b·ªüi ƒëi·ªÉm s·ªë k·∫øt h·ª£p."""
        # Ki·ªÉm tra xem phi√™n h·ªçc c√≥ ƒëang ch·∫°y kh√¥ng, n·∫øu kh√¥ng th√¨ tho√°t
        if self.status != 'Running': return
        
        # ƒê√°nh d·∫•u phi√™n h·ªçc ƒë√£ k·∫øt th√∫c
        self.status = 'Finished'
        # Ghi l·∫°i th·ªùi gian k·∫øt th√∫c th·ª±c t·∫ø (d√πng th·ªùi gian ƒë∆∞·ª£c truy·ªÅn v√†o ho·∫∑c th·ªùi gian hi·ªán t·∫°i)
        self.actual_end_time = end_time_override if end_time_override else datetime.now()
        
        # T√≠nh ƒëi·ªÉm ho√†n th√†nh nhi·ªám v·ª• (t·ª∑ l·ªá t·ª´ 0.0 ƒë·∫øn 1.0)
        quest_completion_score = self.quest_progress
        
        # T√≠nh th·ªùi gian th·ª±c t·∫ø ƒë√£ h·ªçc - s·ª≠ d·ª•ng actual_start_time n·∫øu c√≥
        start_time_for_calc = self.actual_start_time if self.actual_start_time else self.start_time
        time_spent_seconds = (self.actual_end_time - start_time_for_calc).total_seconds()
        
        # T√≠nh th·ªùi gian d·ª± ki·∫øn ban ƒë·∫ßu (ƒë∆°n v·ªã: gi√¢y)
        time_planned_seconds = (self.end_time - self.start_time).total_seconds()
        # T√≠nh t·ª∑ l·ªá th·ªùi gian th·ª±c t·∫ø so v·ªõi d·ª± ki·∫øn
        time_ratio = time_spent_seconds / time_planned_seconds if time_planned_seconds > 0 else 1.0
        # T√≠nh ƒëi·ªÉm th∆∞·ªüng hi·ªáu qu·∫£ th·ªùi gian (c√†ng h·ªçc √≠t th·ªùi gian c√†ng ƒë∆∞·ª£c th∆∞·ªüng)
        time_efficiency_bonus = max(0, 1 - time_ratio)

        # ƒê·∫∑t tr·ªçng s·ªë cho hai y·∫øu t·ªë ch·∫•m ƒëi·ªÉm
        quest_weight = 0.5  # Ho√†n th√†nh nhi·ªám v·ª• chi·∫øm 50%
        time_weight = 0.5   # Hi·ªáu qu·∫£ th·ªùi gian chi·∫øm 50%
        # T√≠nh ƒëi·ªÉm t·ªïng k·∫øt d·ª±a tr√™n tr·ªçng s·ªë
        final_performance_score = (quest_completion_score * quest_weight) + (time_efficiency_bonus * time_weight)
        
        # X·∫øp h·∫°ng d·ª±a tr√™n ƒëi·ªÉm t·ªïng k·∫øt
        if final_performance_score >= 0.85: self.rank = 'S'      # Xu·∫•t s·∫Øc (‚â•85%)
        elif final_performance_score >= 0.70: self.rank = 'A'    # Gi·ªèi (70-84%)
        elif final_performance_score >= 0.55: self.rank = 'B'    # Kh√° (55-69%)
        elif final_performance_score >= 0.40: self.rank = 'C'    # Trung b√¨nh (40-54%)
        else: self.rank = 'F'                                    # Y·∫øu (<40%)

        # Chuy·ªÉn ƒë·ªïi t·ª∑ l·ªá ho√†n th√†nh th√†nh ph·∫ßn trƒÉm ƒë·ªÉ hi·ªÉn th·ªã
        progress_percent = f"{int(quest_completion_score * 100)}%"
        # In th√¥ng b√°o k·∫øt qu·∫£ phi√™n h·ªçc
        actual_duration = f"{time_spent_seconds/60:.1f} ph√∫t"
        print(f"Phi√™n h·ªçc '{self.goal_description}' ƒë√£ k·∫øt th√∫c v·ªõi H·∫°ng: {self.rank} (Ho√†n th√†nh {progress_percent} nhi·ªám v·ª•, th·ªùi gian th·ª±c: {actual_duration}).")

    def start_session(self, actual_start_time: Optional[datetime] = None):
        """B·∫Øt ƒë·∫ßu phi√™n h·ªçc v√† ghi l·∫°i th·ªùi gian b·∫Øt ƒë·∫ßu th·ª±c t·∫ø."""
        if self.status != 'Scheduled':
            print(f"Kh√¥ng th·ªÉ b·∫Øt ƒë·∫ßu phi√™n h·ªçc '{self.goal_description}' - tr·∫°ng th√°i hi·ªán t·∫°i: {self.status}")
            return False        
        self.status = 'Running'
        self.actual_start_time = actual_start_time if actual_start_time else datetime.now()
        print(f"‚ñ∂Ô∏è  B·∫ÆT ƒê·∫¶U TH·ª∞C T·∫æ: '{self.goal_description}' l√∫c {self.actual_start_time.strftime('%H:%M:%S')}")
        return True

    def get_session_data(self) -> Dict[str, Any]:
        """Tr·∫£ v·ªÅ d·ªØ li·ªáu t√≥m t·∫Øt c·ªßa phi√™n h·ªçc, kh√¥ng c√≥ 'tags'."""
        # T√≠nh th·ªùi l∆∞·ª£ng th·ª±c t·∫ø c·ªßa phi√™n h·ªçc
        if self.actual_end_time and self.actual_start_time:
            # N·∫øu c√≥ c·∫£ th·ªùi gian b·∫Øt ƒë·∫ßu v√† k·∫øt th√∫c th·ª±c t·∫ø
            duration = self.actual_end_time - self.actual_start_time
        elif self.actual_end_time:
            # N·∫øu ch·ªâ c√≥ th·ªùi gian k·∫øt th√∫c th·ª±c t·∫ø, d√πng th·ªùi gian b·∫Øt ƒë·∫ßu d·ª± ki·∫øn
            duration = self.actual_end_time - self.start_time
        else:
            # N·∫øu ch∆∞a k·∫øt th√∫c ho·∫∑c ch∆∞a c√≥ th·ªùi gian th·ª±c t·∫ø
            duration = timedelta(0)
            
        # Tr·∫£ v·ªÅ dictionary ch·ª©a t·∫•t c·∫£ th√¥ng tin quan tr·ªçng c·ªßa phi√™n h·ªçc
        return {
            "session_id": self.session_id,                           # ID duy nh·∫•t c·ªßa phi√™n h·ªçc
            "goal": self.goal_description,                           # M√¥ t·∫£ m·ª•c ti√™u phi√™n h·ªçc
            "status": self.status,                                   # Tr·∫°ng th√°i hi·ªán t·∫°i (Scheduled/Running/Finished)
            "start_time": self.start_time,                          # Th·ªùi gian b·∫Øt ƒë·∫ßu d·ª± ki·∫øn
            "end_time": self.end_time,                              # Th·ªùi gian k·∫øt th√∫c d·ª± ki·∫øn
            "actual_start_time": self.actual_start_time,            # Th·ªùi gian b·∫Øt ƒë·∫ßu th·ª±c t·∫ø
            "actual_end_time": self.actual_end_time,                # Th·ªùi gian k·∫øt th√∫c th·ª±c t·∫ø
            "rank": self.rank,                                      # H·∫°ng ƒë·∫°t ƒë∆∞·ª£c (S/A/B/C/F)
            "duration_seconds": duration.total_seconds(),           # Th·ªùi l∆∞·ª£ng th·ª±c t·∫ø t√≠nh b·∫±ng gi√¢y
            "linked_quests_data": [q.to_dict() for q in self.linked_quests]  # Danh s√°ch d·ªØ li·ªáu c√°c nhi·ªám v·ª• li√™n k·∫øt
        }


class QuestSystem:
    """Qu·∫£n l√Ω t·∫•t c·∫£ c√°c ƒë·ªëi t∆∞·ª£ng Quest."""
    def __init__(self):
        self.active_quests: Dict[str, Quest] = {}

    def create_quest(self, description: str, difficulty: int) -> Quest:
        """T·∫°o m·ªôt ƒë·ªëi t∆∞·ª£ng Quest m·ªõi, l∆∞u tr·ªØ v√† tr·∫£ v·ªÅ n√≥."""
        quest = Quest(description, difficulty)
        self.active_quests[quest.quest_id] = quest
        return quest

    def get_completed_quests_count(self) -> int:
        """ƒê·∫øm s·ªë l∆∞·ª£ng quest ƒë√£ ƒë∆∞·ª£c ƒë√°nh d·∫•u l√† ho√†n th√†nh."""
        return sum(1 for quest in self.active_quests.values() if quest.is_completed)


class StudyAnalytics:
    """
    Cung c·∫•p c√°c ph√¢n t√≠ch v√† th·ªëng k√™ chi ti·∫øt v·ªÅ hi·ªáu su·∫•t h·ªçc t·∫≠p c·ªßa ng∆∞·ªùi d√πng.
    """
    def __init__(self, quest_system: QuestSystem):
        self.session_history: List[Dict[str, Any]] = []
        self.quest_system = quest_system
        self.aggregated_stats: Dict[str, Any] = self._get_initial_stats()
        self.focus_streak: int = 0
        self.quest_system = quest_system
        self.unlockable_achievements = {
            'BuocDiDauTien': {'metric': 'total_sessions', 'value': 1, 'name': 'B∆∞·ªõc ƒêi ƒê·∫ßu Ti√™n'},
            'HocVienXuatSac': {'metric': 'rank_counts.S', 'value': 1, 'name': 'H·ªçc Vi√™n Xu·∫•t S·∫Øc'},
            'ChamChiCanCu': {'metric': 'total_study_hours', 'value': 1, 'name': 'ChƒÉm Ch·ªâ C·∫ßn C√π'},
            'BacThayNhiemVu': {'metric': 'quests_completed', 'value': 3, 'name': 'B·∫≠c Th·∫ßy Nhi·ªám V·ª•'},
            'Chuoi3Ngay': {'metric': 'focus_streak', 'value': 3, 'name': 'Chu·ªói 3 Ng√†y'}
        }

    def _get_initial_stats(self) -> Dict[str, Any]:
        """Kh·ªüi t·∫°o dictionary th·ªëng k√™, kh√¥ng c√≥ 'time_by_tag'."""
        return {
            'total_study_seconds': 0, 'total_study_hours': 0, 'total_sessions': 0,
            'rank_counts': {'S': 0, 'A': 0, 'B': 0, 'C': 0, 'F': 0},
            'average_session_duration_minutes': 0, 'average_rank_score': 0,
            'quests_completed': 0, 'quest_completion_rate': 0
        }

    def log_session(self, session_data: Dict[str, Any]):
        """Ghi l·∫°i m·ªôt phi√™n h·ªçc ƒë√£ k·∫øt th√∫c v√† g·ªçi h√†m c·∫≠p nh·∫≠t th·ªëng k√™."""
        # !!!
        # G√¢y l·ªói khi ImportSave()
        # !!!
        # self.session_history.append(session_data)
        self._update_stats()

    def _update_stats(self):
        """T√≠nh to√°n l·∫°i th·ªëng k√™, kh√¥ng x·ª≠ l√Ω 'tags'."""
        stats = self._get_initial_stats()
        rank_map = {'S': 5, 'A': 4, 'B': 3, 'C': 2, 'F': 0}
        total_rank_score = 0
        
        for session in self.session_history:
            stats['total_sessions'] += 1
            stats['total_study_seconds'] += session.get('duration_seconds', 0)
            
            rank = session.get('rank', 'N/A')
            if rank in stats['rank_counts']:
                stats['rank_counts'][rank] += 1
                total_rank_score += rank_map.get(rank, 0)
        # T√≠nh to√°n c√°c ch·ªâ s·ªë cu·ªëi c√πng
        stats['total_study_hours'] = stats['total_study_seconds'] / 3600
        if stats['total_sessions'] > 0:
            stats['average_session_duration_minutes'] = (stats['total_study_seconds'] / stats['total_sessions']) / 60
            stats['average_rank_score'] = total_rank_score / stats['total_sessions']

        # L·∫•y d·ªØ li·ªáu t·ª´ h·ªá th·ªëng nhi·ªám v·ª•
        stats['quests_completed'] = self.quest_system.get_completed_quests_count()
        total_quests = len(self.quest_system.active_quests)
        if total_quests > 0:
            stats['quest_completion_rate'] = (stats['quests_completed'] / total_quests) * 100

        self.aggregated_stats = stats
        # !!!
        # !!! G√¢y l·ªói n·∫øu ch·∫°y !!!
        # !!!
        # self.focus_streak = self._calculate_focus_streak()

    def _calculate_focus_streak(self) -> int:
        """T√≠nh s·ªë ng√†y h·ªçc li√™n ti·∫øp."""
        if not self.session_history: return 0
        
        study_dates = sorted(list(set(s['end_time'].date() for s in self.session_history)))
        if not study_dates: return 0
        
        streak = 0
        # Ch·ªâ b·∫Øt ƒë·∫ßu t√≠nh chu·ªói n·∫øu ng√†y h·ªçc cu·ªëi c√πng l√† h√¥m nay ho·∫∑c h√¥m qua
        if study_dates[-1] >= date.today() - timedelta(days=1):
            streak = 1
            # L·∫∑p ng∆∞·ª£c t·ª´ cu·ªëi danh s√°ch ƒë·ªÉ ki·ªÉm tra t√≠nh li√™n t·ª•c
            for i in range(len(study_dates) - 1, 0, -1):
                if study_dates[i] - study_dates[i-1] == timedelta(days=1):
                    streak += 1
                else:
                    break  # Ng·∫Øt chu·ªói n·∫øu c√≥ kho·∫£ng tr·ªëng
        return streak

    def check_unlockable_achievements(self, character: Character):
        """Ki·ªÉm tra v√† m·ªü kh√≥a th√†nh t√≠ch cho nh√¢n v·∫≠t."""
        for ach_id, criteria in self.unlockable_achievements.items():
            if ach_id in character.unlocked_achievements: continue

            # L·∫•y gi√° tr·ªã th·ªëng k√™ c·∫ßn ki·ªÉm tra
            metric_path = criteria['metric'].split('.')
            value_to_check = self.aggregated_stats
            try:
                for key in metric_path: value_to_check = value_to_check[key]
            except KeyError: continue

            # So s√°nh v·ªõi gi√° tr·ªã y√™u c·∫ßu v√† m·ªü kh√≥a
            if value_to_check >= criteria['value']:
                character.add_achievement(ach_id)
                
    def generate_report(self) -> str:
        """T·∫°o b√°o c√°o chi ti·∫øt, kh√¥ng c√≥ ph·∫ßn 'Time Breakdown by Tag'."""
        stats = self.aggregated_stats
        report_lines = [
            "==========================================",
            # ... c√°c d√≤ng b√°o c√°o kh√°c gi·ªØ nguy√™n ...
            "--- ƒê√°nh Gi√° ---",
            f"S: {stats['rank_counts']['S']} | A: {stats['rank_counts']['A']} | B: {stats['rank_counts']['B']} | C: {stats['rank_counts']['C']} | F: {stats['rank_counts']['F']}",
            "",
            "--- Ng√†y H·ªçc Li√™n Ti·∫øp ---",
            f"{self.focus_streak}",
            "",
            "--- Nhi·ªám V·ª• ---",
            f"Nhi·ªám V·ª• Ho√†n Th√†nh: {stats['quests_completed']} / {len(self.quest_system.active_quests)}",
            f"T·ª∑ L·ªá Ho√†n Th√†nh: {stats['quest_completion_rate']:.1f}%",
            "=========================================="
        ]
        return "\n".join(report_lines)


class SessionManager:
    """
    B·ªô ƒëi·ªÅu khi·ªÉn trung t√¢m cho t·∫•t c·∫£ c√°c phi√™n h·ªçc.
    ƒê√¢y l√† class ƒëi·ªÅu ph·ªëi ho·∫°t ƒë·ªông c·ªßa c√°c h·ªá th·ªëng kh√°c nh∆∞
    StudySession, RewardSystem, v√† StudyAnalytics.
    """
    def __init__(self, character: Character, reward_system: RewardSystem, analytics: StudyAnalytics):
        # L∆∞u tr·ªØ tham chi·∫øu ƒë·∫øn c√°c h·ªá th·ªëng c·ªët l√µi kh√°c
        self.sessions: List[StudySession] = []
        self.character = character
        self.reward_system = reward_system
        self.analytics = analytics
        self.arena = Arena(character)  # Th√™m h·ªá th·ªëng ƒë·∫•u tr∆∞·ªùng
        self.save_file_path = self._get_save_path()
        self.qr_image_path = self._get_qr_path()
        self.public_rewards = [0, 0]
        self.public_rank = ''
    
    def _get_save_path(self):
        """X√°c ƒë·ªãnh ƒë∆∞·ªùng d·∫´n l∆∞u file t√πy theo platform"""
        if platform == 'android':
            from android.storage import app_storage_path # type: ignore
            save_dir = app_storage_path()
            print(os.path.join(save_dir, "save_data.json"))
            return os.path.join(save_dir, "save_data.json")
        else:
            save_dir = os.path.dirname(os.path.abspath(__file__))
            print(os.path.join(save_dir, "save_data.json"))
            return os.path.join(save_dir, "save_data.json")

    def _get_qr_path(self):
        """X√°c ƒë·ªãnh ƒë∆∞·ªùng d·∫´n l∆∞u QR code"""
        if platform == 'android':
            from android.storage import app_storage_path # type: ignore
            save_dir = app_storage_path()
            return os.path.join(save_dir, "save_qr.png")
        else:
            save_dir = os.path.dirname(os.path.abspath(__file__))
            return os.path.join(save_dir, "save_qr.png")
    
    def generate_qr_code(self):
        """
        T·∫°o QR code t·ª´ d·ªØ li·ªáu save game v·ªõi compression t·ªëi ∆∞u
        Returns: ƒë∆∞·ªùng d·∫´n file QR code ho·∫∑c None n·∫øu l·ªói
        """
        try:
            # L·∫•y d·ªØ li·ªáu save game ƒë√£ ƒë∆∞·ª£c t·ªëi ∆∞u cho QR
            save_data = self._get_optimized_qr_data()
            # Chuy·ªÉn ƒë·ªïi th√†nh JSON string compact
            json_string = json.dumps(save_data, ensure_ascii=False, separators=(',', ':'))
            
            # N√©n d·ªØ li·ªáu b·∫±ng base64
            compressed_bytes = gzip.compress(json_string.encode('utf-8'))
            compressed_data = base64.b64encode(compressed_bytes).decode('ascii')
            
            # Ki·ªÉm tra k√≠ch th∆∞·ªõc d·ªØ li·ªáu
            print(f"QR data size: {len(compressed_data)} characters")
            
            # N·∫øu d·ªØ li·ªáu qu√° l·ªõn, s·ª≠ d·ª•ng phi√™n b·∫£n r√∫t g·ªçn h∆°n
            if len(compressed_data) > 2000:  # Gi·ªõi h·∫°n an to√†n cho QR code
                print("Data too large, using minimal version...")
                save_data = self._get_minimal_qr_data()
                json_string = json.dumps(save_data, ensure_ascii=False, separators=(',', ':'))
                compressed_bytes = gzip.compress(json_string.encode('utf-8'))
                compressed_data = base64.b64encode(compressed_bytes).decode('ascii')
                print(f"Minimal QR data size: {len(compressed_data)} characters")
            
            # T·∫°o QR code v·ªõi error correction th·∫•p h∆°n ƒë·ªÉ ch·ª©a nhi·ªÅu d·ªØ li·ªáu h∆°n
            qr = qrcode.QRCode(
                version=None,  # T·ª± ƒë·ªông ƒëi·ªÅu ch·ªânh
                error_correction=qrcode.constants.ERROR_CORRECT_L,  # Th·∫•p nh·∫•t
                box_size=8,  # Gi·∫£m k√≠ch th∆∞·ªõc box
                border=2,    # Gi·∫£m border
            )
            
            # Th√™m prefix ƒë·ªÉ nh·∫≠n bi·∫øt
            qr_data = f"GSS:{compressed_data}"
            qr.add_data(qr_data)
            qr.make(fit=True)
            # T·∫°o h√¨nh ·∫£nh QR
            qr_image = qr.make_image(fill_color="black", back_color="white")
            # L∆∞u file
            qr_image.save(self.qr_image_path)
            
            print(f"QR code ƒë√£ ƒë∆∞·ª£c t·∫°o: {self.qr_image_path}")
            return self.qr_image_path
            
        except Exception as e:
            print(f"L·ªói khi t·∫°o QR code: {str(e)}")
            return None

    def import_from_qr_data(self, qr_data):
        """
        Import d·ªØ li·ªáu t·ª´ QR code data v·ªõi h·ªó tr·ª£ gzip
        """
        try:
            # Ki·ªÉm tra prefix
            if not qr_data.startswith("GSS:"):
                print("QR code kh√¥ng ph·∫£i c·ªßa GSScheduler")
                return False
            
            # L·∫•y d·ªØ li·ªáu ƒë√£ n√©n
            compressed_data = qr_data[4:]  # B·ªè prefix "GSS:"
            
            # Gi·∫£i n√©n base64 v√† gzip
            compressed_bytes = base64.b64decode(compressed_data.encode('ascii'))
            json_string = gzip.decompress(compressed_bytes).decode('utf-8')
            
            # Parse JSON
            save_data = json.loads(json_string)
            
            # Import d·ªØ li·ªáu
            return self._load_save_data(save_data)
            
        except Exception as e:
            print(f"L·ªói khi import t·ª´ QR: {str(e)}")
            return False

    def ExportSave(self):
        """
        Xu·∫•t d·ªØ li·ªáu game ra file JSON
        L∆∞u ch·ªâ s·ªë nh√¢n v·∫≠t, th√†nh t√≠ch, sessions
        """
        try:
            save_data = self._get_save_data()
            
            with open(self.save_file_path, 'w', encoding='utf-8') as f:
                json.dump(save_data, f, indent=2, ensure_ascii=False)
            
            print(f"D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c l∆∞u th√†nh c√¥ng v√†o {self.save_file_path}")
            return True
            
        except Exception as e:
            print(f"L·ªói khi l∆∞u d·ªØ li·ªáu: {str(e)}")
            return False

    def ImportSave(self):
        """
        Nh·∫≠p d·ªØ li·ªáu game t·ª´ file JSON
        T·∫£i ch·ªâ s·ªë nh√¢n v·∫≠t, th√†nh t√≠ch, sessions
        """
        try:
            if not os.path.exists(self.save_file_path):
                print(f"File save kh√¥ng t·ªìn t·∫°i: {self.save_file_path}")
                return False
            
            with open(self.save_file_path, 'r', encoding='utf-8') as f:
                save_data = json.load(f)
            
            return self._load_save_data(save_data)
            
        except Exception as e:
            print(f"L·ªói khi t·∫£i d·ªØ li·ªáu: {str(e)}")
            return False
    
    def create_comprehensive_demo_data(self):
        """
        T·∫°o data ƒë·∫ßy ƒë·ªß v·ªõi stats phong ph√∫ ƒë·ªÉ demo
        """
        # Set comprehensive character info
        self.character.name = "Demo Hero"
        self.character.level = 15
        self.character.xp = 450
        self.character.xp_to_next_level = 800
        self.character.hp = 120
        self.character.max_hp = 150
        self.character.gold = 350
        self.character.dex = 25
        self.character.int = 18
        self.character.luk = 22
        self.character.available_points = 3
        
        # Add some achievements
        self.character.unlocked_achievements.add('BuocDiDauTien')
        self.character.unlocked_achievements.add('HocVienXuatSac')
        self.character.unlocked_achievements.add('ChamChiCanCu')        # Create demo items for inventory
        
        self.character.inventory.extend([Items['Khien_Doi_Truong_Meo'], Items['Sach_Phep_Tru_Ta']])
        self.character.equipment.append(Items['Riu_Tho_San'])
        
        # Create demo quests
        for i in range(8):
            quest = self.analytics.quest_system.create_quest(
                description=f"Demo Quest {i+1}: Study Session Task",
                difficulty=random.randint(1, 5)
            )
            if i < 6:  # Mark some as completed
                quest.is_completed = True
        
        # Create demo session history
        base_time = datetime.now() - timedelta(days=10)
        for day in range(10):
            session_start = base_time + timedelta(days=day, hours=14)
            session_end = session_start + timedelta(hours=2, minutes=random.randint(0, 60))
            
            # Create quests for this session
            session_quests = []
            for j in range(random.randint(2, 4)):
                quest = Quest(f"Task {j+1} for Day {day+1}", random.randint(1, 3))
                if random.random() > 0.3:  # 70% completion rate
                    quest.is_completed = True
                session_quests.append(quest)
            
            # Create session data
            session_data = {
                "session_id": f"demo_session_{day}",
                "goal": f"Study Session Day {day+1}",
                "status": "Finished",
                "start_time": session_start,
                "end_time": session_end,
                "rank": random.choice(['S', 'A', 'A', 'B', 'B', 'C']),  # Weighted towards good grades
                "duration_seconds": (session_end - session_start).total_seconds(),
                "linked_quests_data": [q.to_dict() for q in session_quests]
            }
            
            self.analytics.session_history.append(session_data)
        
        # Update analytics stats
        self.analytics._update_stats()
        self.analytics.focus_streak = 5  # 5-day streak
        
        print("Comprehensive demo data created with full stats, achievements, and session history")

    def _get_optimized_qr_data(self):
        """T·∫°o d·ªØ li·ªáu t·ªëi ∆∞u cho QR code, b·ªè b·ªõt th√¥ng tin kh√¥ng c·∫ßn thi·∫øt"""
        try:
            # Ch·ªâ l·∫•y nh·ªØng th√¥ng tin quan tr·ªçng nh·∫•t
            save_data = {
                "c": {  # character (vi·∫øt t·∫Øt ƒë·ªÉ ti·∫øt ki·ªám)
                    "n": self.character.name,
                    "l": self.character.level,
                    "x": self.character.xp,
                    "h": self.character.hp,
                    "m": self.character.max_hp,
                    "g": self.character.gold,
                    "d": self.character.dex,
                    "i": self.character.int,
                    "k": self.character.luk,
                    "p": self.character.available_points,
                    "a": list(self.character.unlocked_achievements)[:5],  # Ch·ªâ l·∫•y 5 achievement ƒë·∫ßu
                },
                "s": {  # stats (r√∫t g·ªçn)
                    "ts": self.analytics.aggregated_stats.get('total_sessions', 0),
                    "th": round(self.analytics.aggregated_stats.get('total_study_hours', 0), 2),
                    "qc": self.analytics.aggregated_stats.get('quests_completed', 0),
                    "fs": self.analytics.focus_streak,
                    "rc": self.analytics.aggregated_stats.get('rank_counts', {})
                },
                "t": datetime.now().strftime("%Y%m%d%H%M"),  # timestamp ng·∫Øn g·ªçn
                "v": "2.0"  # version
            }
            
            print(f"Optimized save data for character: {self.character.name}")
            return save_data
        except Exception as e:
            print(f"Error generating optimized data: {e}")
    
    def _get_save_data(self):
        """L·∫•y d·ªØ li·ªáu save game ƒë·∫ßy ƒë·ªß cho file JSON"""
        try:
            save_data = {
                "character": {
                    "name": self.character.name,
                    "level": self.character.level,
                    "xp": self.character.xp,
                    "xp_to_next_level": self.character.xp_to_next_level,
                    "hp": self.character.hp,
                    "max_hp": self.character.max_hp,
                    "gold": self.character.gold,
                    "dex": self.character.dex,
                    "int": self.character.int,
                    "luk": self.character.luk,
                    "available_points": self.character.available_points,
                    "unlocked_achievements": list(self.character.unlocked_achievements),
                    "inventory": [
                        {
                            "name": item.name,
                            "description": item.description,
                            "category": item.category,
                            "rarity": item.rarity.name,                            "price": item.price,
                            "icon": item.icon,
                            "consumable": item.consumable,
                            "passive": item.passive,
                            "on_use_effect": item.on_use_effect  # THAY ƒê·ªîI: ƒë·ªïi t√™n t·ª´ stat_bonuses
                        } for item in self.character.inventory
                    ],
                    "equipment": [
                        {
                            "name": item.name,
                            "description": item.description,
                            "category": item.category,
                            "rarity": item.rarity.name,                            "price": item.price,
                            "icon": item.icon,
                            "consumable": item.consumable,
                            "passive": item.passive,
                            "on_use_effect": item.on_use_effect  # THAY ƒê·ªîI: ƒë·ªïi t√™n t·ª´ stat_bonuses
                        } for item in self.character.equipment
                    ]
                },
                "analytics": {
                    "session_history": [
                        {
                            **session,
                            "start_time": session["start_time"].isoformat() if isinstance(session["start_time"], datetime) else session["start_time"],
                            "end_time": session["end_time"].isoformat() if isinstance(session["end_time"], datetime) else session["end_time"]
                        } for session in self.analytics.session_history
                    ],
                    "aggregated_stats": self.analytics.aggregated_stats,
                    "focus_streak": self.analytics.focus_streak
                },
                "sessions": [
                    {
                        "session_id": session.session_id,
                        "goal_description": session.goal_description,
                        "start_time": session.start_time.isoformat(),
                        "end_time": session.end_time.isoformat(),
                        "actual_end_time": session.actual_end_time.isoformat() if session.actual_end_time else None,
                        "status": session.status,
                        "rank": session.rank,
                        "linked_quests": [
                            {
                                "quest_id": quest.quest_id,
                                "description": quest.description,
                                "difficulty": quest.difficulty,
                                "is_completed": quest.is_completed
                            } for quest in session.linked_quests
                        ]
                    } for session in self.sessions
                ],
                "quest_system": {
                    "active_quests": [
                        {
                            "quest_id": quest.quest_id,
                            "description": quest.description,
                            "difficulty": quest.difficulty,
                            "is_completed": quest.is_completed
                        } for quest in self.analytics.quest_system.active_quests.values()
                    ]
                },
                "save_timestamp": datetime.now().isoformat(),
                "version": "1.0"
            }
            print(f"Generated comprehensive save data for character: {self.character.name}")
            return save_data
        except Exception as e:
            print(f"Error generating save data: {e}")
            import traceback
            traceback.print_exc()
            return {"error": "failed_to_generate", "timestamp": datetime.now().isoformat()}

    def _load_save_data(self, save_data):
        """Load d·ªØ li·ªáu save game - s·ª≠a l·∫°i cho ph√π h·ª£p v·ªõi structure th·ª±c t·∫ø"""
        try:
            # Kh√¥i ph·ª•c character data
            char_data = save_data.get("character", {})
            self.character.name = char_data.get("name", "Hero")
            self.character.level = char_data.get("level", 1)
            self.character.xp = char_data.get("xp", 0)
            self.character.xp_to_next_level = char_data.get("xp_to_next_level", 100)
            self.character.hp = char_data.get("hp", 50)
            self.character.max_hp = char_data.get("max_hp", 50)
            self.character.gold = char_data.get("gold", 10)
            self.character.dex = char_data.get("dex", 1)
            self.character.int = char_data.get("int", 1)
            self.character.luk = char_data.get("luk", 1)
            self.character.available_points = char_data.get("available_points", 0)
            self.character.unlocked_achievements = set(char_data.get("unlocked_achievements", []))
            
            # Kh√¥i ph·ª•c inventory
            self.character.inventory = []
            for item_data in char_data.get("inventory", []):
                try:
                    rarity_enum = Rarity[item_data.get("rarity", "COMMON")]
                    item = Item(
                        name=item_data.get("name", "Unknown Item"),
                        description=item_data.get("description", ""),
                        category=item_data.get("category", "misc"),
                        rarity=rarity_enum,                        price=item_data.get("price", 0),
                        icon_path=item_data.get("icon", ""),
                        consumable=item_data.get("consumable", False),
                        passive=item_data.get("passive", False),
                        on_use_effect=item_data.get("on_use_effect", {})  # THAY ƒê·ªîI: ƒë·ªïi t√™n t·ª´ stat_bonuses
                    )
                    self.character.inventory.append(item)
                except (KeyError, ValueError) as e:
                    print(f"Error loading inventory item: {e}")
            
            # Kh√¥i ph·ª•c equipment
            self.character.equipment = []
            for item_data in char_data.get("equipment", []):
                try:
                    rarity_enum = Rarity[item_data.get("rarity", "COMMON")]
                    item = Item(
                        name=item_data.get("name", "Unknown Equipment"),
                        description=item_data.get("description", ""),
                        category=item_data.get("category", "equipment"),
                        rarity=rarity_enum,                        price=item_data.get("price", 0),
                        icon_path=item_data.get("icon", ""),
                        consumable=item_data.get("consumable", False),
                        passive=item_data.get("passive", True),
                        on_use_effect=item_data.get("on_use_effect", {})  # THAY ƒê·ªîI: ƒë·ªïi t√™n t·ª´ stat_bonuses
                    )
                    self.character.equipment.append(item)
                except (KeyError, ValueError) as e:
                    print(f"Error loading equipment item: {e}")
            
            # Kh√¥i ph·ª•c analytics
            analytics_data = save_data.get("analytics", {})
            self.analytics.session_history = analytics_data.get("session_history", [])
            self.analytics.aggregated_stats = analytics_data.get("aggregated_stats", self.analytics._get_initial_stats())
            self.analytics.focus_streak = analytics_data.get("focus_streak", 0)
            
            # Kh√¥i ph·ª•c quest system
            quest_data = save_data.get("quest_system", {})
            self.analytics.quest_system.active_quests = {}
            for quest_info in quest_data.get("active_quests", []):
                quest = Quest(
                    description=quest_info.get("description", "Unknown Quest"),
                    difficulty=quest_info.get("difficulty", 1)
                )
                quest.quest_id = quest_info.get("quest_id", quest.quest_id)
                quest.is_completed = quest_info.get("is_completed", False)
                self.analytics.quest_system.active_quests[quest.quest_id] = quest
            
            # Kh√¥i ph·ª•c sessions
            self.sessions = []
            for session_data in save_data.get("sessions", []):
                try:
                    # T√°i t·∫°o quests cho session
                    linked_quests = []
                    for quest_info in session_data.get("linked_quests", []):
                        quest = Quest(
                            description=quest_info.get("description", "Unknown Quest"),
                            difficulty=quest_info.get("difficulty", 1)
                        )
                        quest.quest_id = quest_info.get("quest_id", quest.quest_id)
                        quest.is_completed = quest_info.get("is_completed", False)
                        linked_quests.append(quest)
                    
                    # T√°i t·∫°o session
                    session = StudySession(
                        goal_description=session_data.get("goal_description", "Unknown Session"),
                        start_time=datetime.fromisoformat(session_data["start_time"]),
                        end_time=datetime.fromisoformat(session_data["end_time"]),
                        linked_quests=linked_quests
                    )
                    session.session_id = session_data.get("session_id", session.session_id)
                    session.status = session_data.get("status", "Scheduled")
                    session.rank = session_data.get("rank", "N/A")
                    if session_data.get("actual_end_time"):
                        session.actual_end_time = datetime.fromisoformat(session_data["actual_end_time"])
                    
                    self.sessions.append(session)
                except (KeyError, ValueError) as e:
                    print(f"Error loading session: {e}")
            
            save_timestamp = save_data.get("save_timestamp", "Unknown")
            print(f"D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c load th√†nh c√¥ng - Time: {save_timestamp}")
            print(f"Character: {self.character.name} (Level {self.character.level})")
            return True
            
        except Exception as e:
            print(f"L·ªói khi load d·ªØ li·ªáu: {str(e)}")
            import traceback
            traceback.print_exc()
            return False
    
    def _find_session_by_id(self, session_id: str) -> Optional[StudySession]:
        """
        H√†m tr·ª£ gi√∫p n·ªôi b·ªô ƒë·ªÉ t√¨m m·ªôt phi√™n h·ªçc trong danh s√°ch theo ID.
        
        Returns:
            StudySession ho·∫∑c None n·∫øu kh√¥ng t√¨m th·∫•y.
        """
        for s in self.sessions:
            if s.session_id == session_id:
                return s
        return None

    def schedule_session(
        self,
        goal_description: str,
        start_time: datetime,
        end_time: datetime,
        linked_quests: List[Quest]
    ) -> Optional[StudySession]:
        """
        X√°c th·ª±c v√† l√™n l·ªãch m·ªôt phi√™n h·ªçc m·ªõi.
        Ki·ªÉm tra tr√πng l·∫∑p th·ªùi gian v·ªõi c√°c session ƒë√£ c√≥.

        Returns:
            ƒê·ªëi t∆∞·ª£ng StudySession v·ª´a ƒë∆∞·ª£c t·∫°o n·∫øu th√†nh c√¥ng, ng∆∞·ª£c l·∫°i l√† None.
        """
        try:
            # Ch·ªâ gi·ªØ gi·ªù v√† ph√∫t
            start_time = to_basedate_time(start_time)
            end_time = to_basedate_time(end_time)

            # Ki·ªÉm tra tr√πng l·∫∑p th·ªùi gian v·ªõi c√°c session ƒë√£ c√≥
            session = StudySession(goal_description, start_time, end_time, linked_quests)
            conflicting_session = self._check_time_conflict(start_time, end_time)
            if conflicting_session:
                print(f"Xung ƒë·ªôt th·ªùi gian: Phi√™n h·ªçc m·ªõi tr√πng v·ªõi '{conflicting_session.goal_description}'")
                return [conflicting_session, session]
            
            self.sessions.append(session)
            print(f"üóìÔ∏è  ƒê√É L√äN L·ªäCH: '{session.goal_description}' l√∫c {session.start_time.strftime('%H:%M:%S')}")
            return session
        except (ValueError, KeyError) as e:
            print(f"‚ùå L√äN L·ªäCH TH·∫§T B·∫†I: {e}")
            return None

    def _check_time_conflict(self, new_start: datetime, new_end: datetime) -> Optional[StudySession]:
        """
        Ki·ªÉm tra xem th·ªùi gian m·ªõi c√≥ xung ƒë·ªôt v·ªõi session n√†o ƒë√£ c√≥ kh√¥ng.
        Ch·ªâ so s√°nh gi·ªù:ph√∫t, b·ªè qua ng√†y (theo comment trong main.py).
        
        Returns:
            StudySession b·ªã xung ƒë·ªôt n·∫øu c√≥, None n·∫øu kh√¥ng c√≥ xung ƒë·ªôt.
        """
        # Chuy·ªÉn ƒë·ªïi v·ªÅ c√πng ng√†y ƒë·ªÉ so s√°nh ch·ªâ th·ªùi gian
        base_date = datetime(1900, 1, 1)  # S·ª≠ d·ª•ng ng√†y c∆° s·ªü nh∆∞ trong main.py
        
        new_start_time_only = to_basedate_time(new_start)
        new_end_time_only = to_basedate_time(new_end)
        
        # X·ª≠ l√Ω tr∆∞·ªùng h·ª£p qua ng√†y (v√≠ d·ª•: 23:00 - 01:00)
        if new_end_time_only <= new_start_time_only:
            new_end_time_only += timedelta(days=1)
        
        for existing_session in self.sessions:
            # if existing_session.status == 'Finished': Kh√¥ng b·ªè qua c√°c session ƒë√£ k·∫øt th√∫c. ƒê√¢y l√† tr·∫°ng th√°i b·∫≠t t·∫Øt.
            
            # Chuy·ªÉn session hi·ªán c√≥ v·ªÅ c√πng ƒë·ªãnh d·∫°ng
            existing_start = to_basedate_time(existing_session.start_time)
            existing_end = to_basedate_time(existing_session.end_time)
            
            # X·ª≠ l√Ω tr∆∞·ªùng h·ª£p session hi·ªán c√≥ qua ng√†y
            if existing_end <= existing_start:
                existing_end += timedelta(days=1)
            
            # Ki·ªÉm tra xung ƒë·ªôt: hai kho·∫£ng th·ªùi gian overlap
            if (new_start_time_only <= existing_end and new_end_time_only >= existing_start):
                return existing_session
        
        return None
    
    def mark_quest_as_complete(self, session_id: str, quest_id: str):
        """
        ƒê√°nh d·∫•u m·ªôt nhi·ªám v·ª• l√† ƒë√£ ho√†n th√†nh trong m·ªôt phi√™n h·ªçc ƒëang ch·∫°y. ƒê√¢y l√† "c·∫ßu n·ªëi" gi·ªØa giao di·ªán ng∆∞·ªùi d√πng v√† logic c·ªßa StudySession.
        """
        session = self._find_session_by_id(session_id)
        if session and session.status == 'Running':
            session.mark_quest_as_complete(quest_id)
        else:
            print("L·ªói: Kh√¥ng th·ªÉ ƒë√°nh d·∫•u nhi·ªám v·ª•. Phi√™n h·ªçc kh√¥ng ƒëang ch·∫°y ho·∫∑c kh√¥ng t·ªìn t·∫°i.")

    def update(self, current_time: datetime):
        """
        'Tick' ch√≠nh c·ªßa ·ª©ng d·ª•ng, ƒë∆∞·ª£c g·ªçi ƒë·ªãnh k·ª≥ ƒë·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i.
        T·ª± ƒë·ªông b·∫Øt ƒë·∫ßu v√† k·∫øt th√∫c c√°c phi√™n h·ªçc khi ƒë·∫øn gi·ªù.
        """
        for session in self.sessions[:]: # L·∫∑p tr√™n b·∫£n sao ƒë·ªÉ x√≥a an to√†n
            if session.status == 'Scheduled' and current_time >= session.start_time:
                session.start_session(current_time)  # S·ª≠ d·ª•ng method m·ªõi v·ªõi th·ªùi gian th·ª±c t·∫ø
            
            if session.status == 'Running' and current_time >= session.end_time:
                # G·ªçi finish() kh√¥ng c√≥ tham s·ªë -> k·∫øt th√∫c t·ª± ƒë·ªông khi h·∫øt gi·ªù
                session.finish()
                self._finalize_session(session)

    def end_session_manually(self, session_id: str):
        """
        X·ª≠ l√Ω y√™u c·∫ßu k·∫øt th√∫c m·ªôt phi√™n h·ªçc th·ªß c√¥ng t·ª´ ng∆∞·ªùi d√πng.
        """
        session = self._find_session_by_id(session_id)
        if session and session.status == 'Running':
            print(f"Ng∆∞·ªùi d√πng y√™u c·∫ßu k·∫øt th√∫c s·ªõm phi√™n '{session.goal_description}'.")
            # G·ªçi finish() v·ªõi th·ªùi gian hi·ªán t·∫°i l√†m tham s·ªë
            session.finish(end_time_override=datetime.now())
            self._finalize_session(session)
        else:
            print(f"L·ªói: Kh√¥ng t√¨m th·∫•y phi√™n h·ªçc ƒëang ch·∫°y v·ªõi ID {session_id}.")

    def _finalize_session(self, session: StudySession):
        """
        X·ª≠ l√Ω t·∫•t c·∫£ logic sau khi m·ªôt phi√™n h·ªçc k·∫øt th√∫c.
        ƒê√¢y l√† n∆°i t·∫≠p trung c√°c b∆∞·ªõc x·ª≠ l√Ω cu·ªëi c√πng.
        """
        if session.status != 'Finished': return
        
        # 1. Ghi l·∫°i d·ªØ li·ªáu ph√¢n t√≠ch
        self.analytics.log_session(session.get_session_data())
        # 2. √Åp d·ª•ng th∆∞·ªüng/ph·∫°t
        self._apply_session_consequences(session)
        # 3. Ki·ªÉm tra th√†nh t√≠ch m·ªõi (sau khi ƒë√£ c√≥ th∆∞·ªüng/ph·∫°t v√† c·∫≠p nh·∫≠t stats)
        self.analytics.check_unlockable_achievements(self.character)
        # 4. X√≥a phi√™n h·ªçc ƒë√£ k·∫øt th√∫c kh·ªèi danh s√°ch ƒëang ho·∫°t ƒë·ªông
        self.sessions.remove(session)

    def _apply_session_consequences(self, session: StudySession):
        """
        √Åp d·ª•ng th∆∞·ªüng cho c√°c nhi·ªám v·ª• ƒë√£ ho√†n th√†nh v√† th∆∞·ªüng/ph·∫°t d·ª±a tr√™n h·∫°ng.
        """
        completed_quests_in_session = session.get_completed_quests()

        # Ph·∫ßn th∆∞·ªüng ch√≠nh t·ª´ vi·ªác ho√†n th√†nh c√°c quest
        if completed_quests_in_session:
            print("\n--- B·∫Øt ƒë·∫ßu trao th∆∞·ªüng cho c√°c nhi·ªám v·ª• ƒë√£ ho√†n th√†nh ---")
            for quest in completed_quests_in_session:
                # G·ªçi h√†m trao th∆∞·ªüng t·ª´ RewardSystem cho t·ª´ng quest
                self.reward_system.grant_quest_completion_reward(self.character, quest.to_dict())
            print("------------------------------------------------------")
        
        # THAY ƒê·ªîI M·ªöI: Th√™m ph·∫ßn th∆∞·ªüng nh·ªè d·ª±a tr√™n h·∫°ng c·ªßa phi√™n h·ªçc
        # ƒê√¢y l√† ph·∫ßn th∆∞·ªüng khuy·∫øn kh√≠ch cho vi·ªác n·ªó l·ª±c v√† ƒë·∫°t k·∫øt qu·∫£ t·ªët
        rank_bonuses = {
            'S': {'type': 'gold', 'amount': 15}, # Th∆∞·ªüng nhi·ªÅu nh·∫•t
            'A': {'type': 'gold', 'amount': 10},
            'B': {'type': 'gold', 'amount': 5},
            'C': {'type': 'gold', 'amount': 2}   # Th∆∞·ªüng khuy·∫øn kh√≠ch
        }

        # N·∫øu h·∫°ng c·ªßa phi√™n h·ªçc n·∫±m trong danh s√°ch th∆∞·ªüng, h√£y trao th∆∞·ªüng
        if session.rank in rank_bonuses:
            print(f"Th∆∞·ªüng th√™m cho vi·ªác ƒë·∫°t H·∫°ng {session.rank}:")
            self.reward_system.grant_reward(self.character, rank_bonuses[session.rank])

        # √Åp d·ª•ng h√¨nh ph·∫°t n·∫øu h·∫°ng th·∫•p
        if session.rank == 'F':
            # Ph·∫°t d·ª±a tr√™n t·ªïng ƒë·ªô kh√≥ c·ªßa c√°c quest CH∆ØA ho√†n th√†nh
            total_difficulty_failed = sum(q.difficulty for q in session.linked_quests if not q.is_completed)
            if total_difficulty_failed > 0:
                print(f"Phi√™n h·ªçc k·∫øt th√∫c v·ªõi h·∫°ng F, √°p d·ª•ng h√¨nh ph·∫°t.")
                self.reward_system.punish(self.character, {'type': 'hp', 'amount': total_difficulty_failed * 4})


class SkillType(Enum):
    """C√°c lo·∫°i skill trong ƒë·∫•u tr∆∞·ªùng"""
    ATTACK = "attack"  # ƒê√°nh th∆∞·ªùng
    DEFEND = "defend"  # Th·ªß
    MAGIC = "magic"    # D√πng ph√©p


class ArenaBot:
    """Bot ƒë·∫•u tr∆∞·ªùng ƒë∆∞·ª£c t·∫°o t·ª´ d·ªØ li·ªáu base64 c·ªßa ng∆∞·ªùi ch∆°i kh√°c"""
    def __init__(self, name: str = "Bot", level: int = 1, hp: int = 50, 
                 max_hp: int = 50, dex: int = 1, int_stat: int = 1, luk: int = 1):
        self.name = name
        self.level = level
        self.hp = hp
        self.max_hp = max_hp
        self.dex = dex
        self.int_stat = int_stat  # Tr√°nh conflict v·ªõi keyword 'int'
        self.luk = luk
        self.is_alive = True
    
    @classmethod
    def from_base64(cls, base64_data: str):
        """T·∫°o bot t·ª´ d·ªØ li·ªáu base64"""
        try:
            # Decode base64 v√† parse JSON
            json_data = base64.b64decode(base64_data).decode('utf-8')
            data = json.loads(json_data)
            
            # L·∫•y th√¥ng tin t·ª´ d·ªØ li·ªáu (c√≥ th·ªÉ l√† format r√∫t g·ªçn ho·∫∑c ƒë·∫ßy ƒë·ªß)
            if 'c' in data:  # Format r√∫t g·ªçn
                char_data = data['c']
                return cls(
                    name=char_data.get('n', 'Unknown Player'),
                    level=char_data.get('l', 1),
                    hp=char_data.get('h', 50),
                    max_hp=char_data.get('m', 50),
                    dex=char_data.get('d', 1),
                    int_stat=char_data.get('i', 1),
                    luk=char_data.get('k', 1)
                )
            else:  # Format ƒë·∫ßy ƒë·ªß
                char_data = data.get('character', {})
                return cls(
                    name=char_data.get('name', 'Unknown Player'),
                    level=char_data.get('level', 1),
                    hp=char_data.get('hp', 50),
                    max_hp=char_data.get('max_hp', 50),
                    dex=char_data.get('dex', 1),
                    int_stat=char_data.get('int', 1),
                    luk=char_data.get('luk', 1)
                )
        except Exception as e:
            print(f"Error parsing base64 data: {e}")
            # Tr·∫£ v·ªÅ bot m·∫∑c ƒë·ªãnh n·∫øu l·ªói
            return cls(name="Error Bot")
    
    def choose_skill(self) -> SkillType:
        """Bot ch·ªçn skill ng·∫´u nhi√™n v·ªõi t·ª∑ l·ªá"""
        choices = [SkillType.ATTACK, SkillType.DEFEND, SkillType.MAGIC]
        weights = [0.5, 0.3, 0.2]  # 50% attack, 30% defend, 20% magic
        return random.choices(choices, weights=weights)[0]


class Arena:
    """H·ªá th·ªëng ƒë·∫•u tr∆∞·ªùng"""
    def __init__(self, character: 'Character'):
        self.player = character
        self.bot: Optional[ArenaBot] = None
        self.battle_log: List[str] = []
        self.turn_count = 0
        self.player_defended = False
        self.bot_defended = False
        self.battle_active = False
    
    def load_opponent(self, base64_data: str) -> bool:
        """Load ƒë·ªëi th·ªß t·ª´ d·ªØ li·ªáu base64"""
        try:
            self.bot = ArenaBot.from_base64(base64_data)
            return True
        except Exception as e:
            print(f"Error loading opponent: {e}")
            return False
    
    def generate_demo_opponent(self) -> str:
        """T·∫°o ƒë·ªëi th·ªß demo v√† tr·∫£ v·ªÅ m√£ base64"""
        demo_names = ["Mom", "Nh·∫≠t Nam", "Natsu", "Luffy", "Goku", "Vegeta", "Saitama"]
        demo_data = {
            "c": {
                "n": random.choice(demo_names),
                "l": random.randint(1, 10),
                "h": random.randint(40, 100),
                "m": random.randint(50, 120),
                "d": random.randint(1, 15),
                "i": random.randint(1, 15),
                "k": random.randint(1, 15)
            }
        }
        
        json_str = json.dumps(demo_data)
        base64_data = base64.b64encode(json_str.encode('utf-8')).decode('utf-8')
        return base64_data
    
    def start_battle(self) -> bool:
        """B·∫Øt ƒë·∫ßu tr·∫≠n ƒë·∫•u"""
        if not self.bot:
            return False
        
        self.battle_active = True
        self.turn_count = 0
        self.battle_log = []
        self.player_defended = False
        self.bot_defended = False
        
        # Reset HP v·ªÅ max
        self.player.hp = self.player.max_hp
        self.bot.hp = self.bot.max_hp
        self.bot.is_alive = True
        
        self.battle_log.append(f"Tr·∫≠n ƒë·∫•u b·∫Øt ƒë·∫ßu! {self.player.name} vs {self.bot.name}")
        return True
    
    def calculate_damage(self, attacker_stats: Dict[str, int], defender_stats: Dict[str, int], 
                        skill_type: SkillType, defender_defended: bool = False) -> int:
        """T√≠nh to√°n s√°t th∆∞∆°ng d·ª±a tr√™n ch·ªâ s·ªë v√† lo·∫°i skill"""
        base_damage = 0
        
        if skill_type == SkillType.ATTACK:
            # ƒê√°nh th∆∞·ªùng: ph·ª• thu·ªôc v√†o DEX v√† LUK
            base_damage = 10 + (attacker_stats['dex'] * 2) + (attacker_stats['luk'] * 1.5)
        elif skill_type == SkillType.MAGIC:
            # Ph√©p thu·∫≠t: ph·ª• thu·ªôc v√†o INT v√† LUK
            base_damage = 15 + (attacker_stats['int'] * 3) + (attacker_stats['luk'] * 1)
        elif skill_type == SkillType.DEFEND:
            # Th·ªß kh√¥ng g√¢y s√°t th∆∞∆°ng
            return 0
        
        # Th√™m y·∫øu t·ªë ng·∫´u nhi√™n
        damage_variance = random.uniform(0.8, 1.2)
        base_damage *= damage_variance
        
        # Gi·∫£m s√°t th∆∞∆°ng n·∫øu ƒë·ªëi th·ªß ƒëang th·ªß
        if defender_defended:
            defense_reduction = 0.3 + (defender_stats['dex'] * 0.02)  # 30% + 2% per DEX
            base_damage *= (1 - min(defense_reduction, 0.8))  # T·ªëi ƒëa gi·∫£m 80%
        
        return max(1, int(base_damage))  # T·ªëi thi·ªÉu 1 damage
    
    def execute_turn(self, player_skill: SkillType) -> Dict[str, Any]:
        """Th·ª±c hi·ªán m·ªôt l∆∞·ª£t ƒë·∫•u"""
        if not self.battle_active or not self.bot:
            return {"error": "Battle not active"}
        
        self.turn_count += 1
        bot_skill = self.bot.choose_skill()
        
        turn_result = {
            "turn": self.turn_count,
            "player_skill": player_skill.value,
            "bot_skill": bot_skill.value,
            "player_damage": 0,
            "bot_damage": 0,
            "messages": [],
            "battle_ended": False,
            "winner": None
        }
        
        # Chu·∫©n b·ªã stats
        player_stats = {
            'dex': self.player.dex,
            'int': self.player.int,
            'luk': self.player.luk
        }
        bot_stats = {
            'dex': self.bot.dex,
            'int': self.bot.int_stat,
            'luk': self.bot.luk
        }
        
        # X·ª≠ l√Ω skill c·ªßa ng∆∞·ªùi ch∆°i
        if player_skill == SkillType.DEFEND:
            self.player_defended = True
            turn_result["messages"].append(f"{self.player.name} ƒëang th·ªß!")
        else:
            self.player_defended = False
            damage = self.calculate_damage(player_stats, bot_stats, player_skill, self.bot_defended)
            self.bot.hp -= damage
            turn_result["player_damage"] = damage
            
            skill_name = "ƒë√°nh th∆∞·ªùng" if player_skill == SkillType.ATTACK else "d√πng ph√©p"
            turn_result["messages"].append(f"{self.player.name} {skill_name} g√¢y {damage} s√°t th∆∞∆°ng!")
        
        # X·ª≠ l√Ω skill c·ªßa bot
        if bot_skill == SkillType.DEFEND:
            self.bot_defended = True
            turn_result["messages"].append(f"{self.bot.name} ƒëang th·ªß!")
        else:
            self.bot_defended = False
            damage = self.calculate_damage(bot_stats, player_stats, bot_skill, self.player_defended)
            self.player.hp -= damage
            turn_result["bot_damage"] = damage
            
            skill_name = "ƒë√°nh th∆∞·ªùng" if bot_skill == SkillType.ATTACK else "d√πng ph√©p"
            turn_result["messages"].append(f"{self.bot.name} {skill_name} g√¢y {damage} s√°t th∆∞∆°ng!")
        
        # Ki·ªÉm tra k·∫øt th√∫c tr·∫≠n ƒë·∫•u
        if self.player.hp <= 0:
            self.battle_active = False
            turn_result["battle_ended"] = True
            turn_result["winner"] = "bot"
            turn_result["messages"].append(f"{self.bot.name} th·∫Øng!")
        elif self.bot.hp <= 0:
            self.battle_active = False
            turn_result["battle_ended"] = True
            turn_result["winner"] = "player"
            turn_result["messages"].append(f"{self.player.name} th·∫Øng!")
            
            # Th∆∞·ªüng cho ng∆∞·ªùi ch∆°i khi th·∫Øng
            xp_reward = 50 + (self.bot.level * 10)
            gold_reward = 25 + (self.bot.level * 5)
            self.player.xp += xp_reward
            self.player.gold += gold_reward
            turn_result["messages"].append(f"Th∆∞·ªüng: +{xp_reward} XP, +{gold_reward} V√†ng!")
            self.player.check_level_up()
        
        # L∆∞u v√†o battle log
        for message in turn_result["messages"]:
            self.battle_log.append(message)
        
        return turn_result
    
    def get_battle_state(self) -> Dict[str, Any]:
        """L·∫•y tr·∫°ng th√°i hi·ªán t·∫°i c·ªßa tr·∫≠n ƒë·∫•u"""
        return {
            "battle_active": self.battle_active,
            "turn_count": self.turn_count,
            "player": {
                "name": self.player.name,
                "hp": self.player.hp,
                "max_hp": self.player.max_hp,
                "level": self.player.level,
                "dex": self.player.dex,
                "int": self.player.int,
                "luk": self.player.luk
            },
            "bot": {
                "name": self.bot.name if self.bot else "No Bot",
                "hp": self.bot.hp if self.bot else 0,
                "max_hp": self.bot.max_hp if self.bot else 0,
                "level": self.bot.level if self.bot else 0,
                "dex": self.bot.dex if self.bot else 0,
                "int": self.bot.int_stat if self.bot else 0,
                "luk": self.bot.luk if self.bot else 0
            } if self.bot else None,
            "battle_log": self.battle_log
        }


# Utility function ƒë·ªÉ t·∫°o demo data
def generate_demo_base64_codes(count: int = 5) -> List[str]:
    """T·∫°o nhi·ªÅu m√£ base64 demo cho test"""
    demo_names = ["Kirito", "Asuna", "Natsu", "Luffy", "Goku", "Vegeta", "Saitama", "Ichigo", "Naruto", "Sasuke"]
    codes = []
    
    for i in range(count):
        demo_data = {
            "c": {
                "n": demo_names[i % len(demo_names)],
                "l": random.randint(1, 10),
                "h": random.randint(40, 100),
                "m": random.randint(50, 120),
                "d": random.randint(1, 15),
                "i": random.randint(1, 15),
                "k": random.randint(1, 15)
            }
        }
        
        json_str = json.dumps(demo_data)
        base64_data = base64.b64encode(json_str.encode('utf-8')).decode('utf-8')
        codes.append(base64_data)
    
    return codes

if __name__ == "__main__":
    print("\n=== DEMO BASE_DATE: So s√°nh gi·ªù v√† ph√∫t, b·ªè qua ng√†y ===")
    # T·∫°o SessionManager v√† c√°c session demo
    char = Character(name="Demo")
    rewards = RewardSystem()
    quests = QuestSystem()
    analytics = StudyAnalytics(quest_system=quests)
    manager = SessionManager(character=char, reward_system=rewards, analytics=analytics)

    # T·∫°o 2 session tr√πng gi·ªù (d√π kh√°c ng√†y)
    s1 = manager.schedule_session(
        "Session S√°ng",
        datetime(2025, 6, 27, 8, 0),
        datetime(2025, 6, 27, 9, 0),
        [quests.create_quest("To√°n", 2)]
    )
    s2 = manager.schedule_session(
        "Session Tr√πng Gi·ªù (kh√°c ng√†y)",
        datetime(2025, 7, 1, 8, 0),
        datetime(2025, 7, 1, 9, 0),
        [quests.create_quest("L√Ω", 2)]
    )
    if not s2:
        print("‚ùå ƒê√£ ph√°t hi·ªán tr√πng gi·ªù d√π kh√°c ng√†y (ƒê√öNG)")
    else:
        print("‚ö†Ô∏è Kh√¥ng ph√°t hi·ªán tr√πng gi·ªù (SAI)")

    # T·∫°o session kh√¥ng tr√πng gi·ªù
    s3 = manager.schedule_session(
        "Session Chi·ªÅu",
        datetime(2025, 6, 27, 14, 0),
        datetime(2025, 6, 27, 15, 0),
        [quests.create_quest("H√≥a", 2)]
    )
    if s3:
        print("‚úÖ Session chi·ªÅu t·∫°o th√†nh c√¥ng (kh√¥ng tr√πng)")

    # T·∫°o session qua ng√†y (23:00-01:00)
    s4 = manager.schedule_session(
        "Session ƒê√™m",
        datetime(2025, 6, 27, 23, 0),
        datetime(2025, 6, 28, 1, 0),
        [quests.create_quest("Anh", 2)]
    )
    if s4:
        print("‚úÖ Session ƒë√™m t·∫°o th√†nh c√¥ng (qua ng√†y)")

    print("\n=== K·∫øt th√∫c demo BASE_DATE ===\n")