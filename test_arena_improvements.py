#!/usr/bin/env python3
"""
Test script ƒë·ªÉ ki·ªÉm tra c√°c c·∫£i ti·∫øn arena:
1. Hi·ªáu ·ª©ng l·∫Øc khi t·∫•n c√¥ng
2. Thanh m√°u HP hi·ªÉn th·ªã ƒë√∫ng (bao g·ªìm s·ªë √¢m)
3. Dialog nh·∫≠p m√£ QR
4. Popup khi thua
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from Backend.Code import Arena, Character, ArenaBot, SkillType
import base64
import json

def test_arena_improvements():
    print("=== TEST ARENA IMPROVEMENTS ===")
    
    # T·∫°o player v√† bot
    player = Character("Test Player")
    player.hp = 30  # HP th·∫•p ƒë·ªÉ d·ªÖ test
    player.max_hp = 50
    
    arena = Arena()  # Arena kh√¥ng c·∫ßn player parameter
    
    # T·∫°o bot m·∫°nh ƒë·ªÉ test thua
    bot_data = {
        'name': 'Strong Bot',
        'level': 5,
        'hp': 80,
        'max_hp': 80,
        'dex': 15,
        'int_stat': 10,
        'luk': 12
    }
    
    # Encode bot data
    json_str = json.dumps(bot_data)
    base64_code = base64.b64encode(json_str.encode()).decode()
    
    # Load bot
    success = arena.load_opponent(base64_code)
    print(f"‚úÖ Bot loaded: {success}")
    print(f"Bot: {arena.bot.name} (Level {arena.bot.level}, HP: {arena.bot.hp}/{arena.bot.max_hp})")
    
    # B·∫Øt ƒë·∫ßu tr·∫≠n ƒë·∫•u
    battle_started = arena.start_battle(player)  # Truy·ªÅn player v√†o start_battle
    print(f"‚úÖ Battle started: {battle_started}")
    print(f"Player HP in battle: {arena.player_copy.hp}/{arena.player_copy.max_hp}")
    
    # Test nhi·ªÅu l∆∞·ª£t ƒë·∫•u ƒë·ªÉ xem HP c√≥ th·ªÉ √¢m kh√¥ng
    turn = 1
    while arena.battle_active and turn <= 10:
        print(f"\n--- Turn {turn} ---")
        
        # Player t·∫•n c√¥ng (test hi·ªáu ·ª©ng l·∫Øc player)
        result = arena.execute_turn(SkillType.ATTACK)
        
        print(f"Battle messages: {result.get('messages', [])}")
        print(f"Player HP: {arena.player_copy.hp}/{arena.player_copy.max_hp}")
        print(f"Bot HP: {arena.bot.hp}/{arena.bot.max_hp}")
        
        # Ki·ªÉm tra HP √¢m
        if arena.player_copy.hp < 0:
            print(f"‚úÖ Player HP went negative: {arena.player_copy.hp}")
        if arena.bot.hp < 0:
            print(f"‚úÖ Bot HP went negative: {arena.bot.hp}")
        
        if result.get("battle_ended", False):
            winner = result.get("winner")
            print(f"‚úÖ Battle ended! Winner: {winner}")
            
            if winner == "bot":
                print("‚úÖ Player lost - this would trigger defeat popup")
            else:
                print("‚úÖ Player won - victory popup would show")
            break
            
        turn += 1
    
    print("\n=== TEST COMPLETED ===")
    return True

def test_qr_dialog_simulation():
    """M√¥ ph·ªèng vi·ªác nh·∫≠p QR code"""
    print("\n=== TEST QR DIALOG SIMULATION ===")
    
    # T·∫°o m√£ QR gi·∫£
    bot_data = {
        'name': 'QR Test Bot',
        'level': 3,
        'hp': 45,
        'max_hp': 45,
        'dex': 8,
        'int_stat': 6,
        'luk': 7
    }
    
    json_str = json.dumps(bot_data)
    qr_code = base64.b64encode(json_str.encode()).decode()
    
    print(f"Sample QR code: {qr_code[:50]}...")
    print("‚úÖ QR code format is valid")
    
    # Test decode
    try:
        decoded = base64.b64decode(qr_code).decode()
        parsed = json.loads(decoded)
        print(f"‚úÖ QR code decoded successfully: {parsed['name']}")
    except Exception as e:
        print(f"‚ùå QR decode failed: {e}")
    
    return True

if __name__ == "__main__":
    print("Testing Arena Improvements...")
    test_arena_improvements()
    test_qr_dialog_simulation()
    print("\nüéâ All tests completed!")
